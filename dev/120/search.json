[{"path":"https://novonordisk-opensource.github.io/connector/CLAUDE.html","id":null,"dir":"","previous_headings":"","what":"CLAUDE.md","title":"CLAUDE.md","text":"file provides guidance Claude Code (claude.ai/code) working code repository.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/CLAUDE.html","id":"project-overview","dir":"","previous_headings":"","what":"Project Overview","title":"CLAUDE.md","text":"connector package R package provides unified interface accessing different data sources clinical research. abstracts file systems, databases, cloud storage behind consistent API, allowing users switch backends without changing R code.","code":""},{"path":[]},{"path":"https://novonordisk-opensource.github.io/connector/CLAUDE.html","id":"package-development","dir":"","previous_headings":"Development Commands","what":"Package Development","title":"CLAUDE.md","text":"","code":"# Load package for development devtools::load_all()  # Run all tests devtools::test()  # Run specific test file testthat::test_file('tests/testthat/test-fs.R')  # Check package (comprehensive check including examples and vignettes) devtools::check()  # Install dependencies devtools::install_deps(dependencies = TRUE)  # Generate documentation devtools::document()  # Build package devtools::build()  # Build and install locally devtools::install()"},{"path":"https://novonordisk-opensource.github.io/connector/CLAUDE.html","id":"code-quality","dir":"","previous_headings":"Development Commands","what":"Code Quality","title":"CLAUDE.md","text":"","code":"# Style check and auto-format styler::style_pkg()  # Lint package for code quality issues lintr::lint_package()  # Check test coverage covr::report()  # Spell check spelling::spell_check_package()"},{"path":"https://novonordisk-opensource.github.io/connector/CLAUDE.html","id":"vignette-and-documentation","dir":"","previous_headings":"Development Commands","what":"Vignette and Documentation","title":"CLAUDE.md","text":"","code":"# Build vignettes devtools::build_vignettes()  # Build pkgdown site locally pkgdown::build_site()"},{"path":[]},{"path":"https://novonordisk-opensource.github.io/connector/CLAUDE.html","id":"design-pattern-r6--s3-hybrid","dir":"","previous_headings":"Core Architecture","what":"Design Pattern: R6 + S3 Hybrid","title":"CLAUDE.md","text":"package uses hybrid R6/S3 approach: - R6 classes (Connector, ConnectorFS, ConnectorDBI) manage state provide object-oriented structure - S3 generics (read_cnt(), write_cnt(), list_content_cnt()) provide familiar R method dispatch - S3 methods *_methods.R files bridge gap generics R6 implementations","code":""},{"path":[]},{"path":"https://novonordisk-opensource.github.io/connector/CLAUDE.html","id":"configuration-system-connectr","dir":"","previous_headings":"Core Architecture > Key Components","what":"Configuration System (connect.R)","title":"CLAUDE.md","text":"connect() function parses YAML configuration files Supports template interpolation {metadata.key} syntax Validates configuration structure creates appropriate backend objects Returns connectors object containing named backend instances","code":""},{"path":"https://novonordisk-opensource.github.io/connector/CLAUDE.html","id":"generic-system-cnt_genericsr","dir":"","previous_headings":"Core Architecture > Key Components","what":"Generic System (cnt_generics.R)","title":"CLAUDE.md","text":"Defines complete API surface: - Core operations: read_cnt(), write_cnt(), list_content_cnt(), remove_cnt() - File operations: upload_cnt(), download_cnt() - Directory operations: create_directory_cnt(), remove_directory_cnt() - Database operations: tbl_cnt(), disconnect_cnt()","code":""},{"path":"https://novonordisk-opensource.github.io/connector/CLAUDE.html","id":"backend-resolution-generic_backendr","dir":"","previous_headings":"Core Architecture > Key Components","what":"Backend Resolution (generic_backend.R)","title":"CLAUDE.md","text":"create_backend() instantiates backends configuration get_backend_fct() resolves backend type strings constructor functions Supports built-backends (connector_fs, connector_dbi) external packages (package::function)","code":""},{"path":"https://novonordisk-opensource.github.io/connector/CLAUDE.html","id":"file-system-backend-fsr-fs_r","dir":"","previous_headings":"Core Architecture > Key Components","what":"File System Backend (fs.R, fs_*.R)","title":"CLAUDE.md","text":"ConnectorFS R6 class file operations Format detection based file extensions Conditional dependencies different file formats (arrow, haven, readxl) Separate files reading (fs_read.R), writing (fs_write.R), methods (fs_methods.R)","code":""},{"path":"https://novonordisk-opensource.github.io/connector/CLAUDE.html","id":"database-backend-dbir-dbi_r","dir":"","previous_headings":"Core Architecture > Key Components","what":"Database Backend (dbi.R, dbi_*.R)","title":"CLAUDE.md","text":"ConnectorDBI R6 class database operations Uses DBI interface database-agnostic operations Automatic connection cleanup via finalize() method Lazy evaluation support dplyr::tbl()","code":""},{"path":"https://novonordisk-opensource.github.io/connector/CLAUDE.html","id":"configuration-file-structure","dir":"","previous_headings":"Core Architecture","what":"Configuration File Structure","title":"CLAUDE.md","text":"","code":"metadata:               # Optional: Template variables   key: value    env:                    # Optional: Environment variables to set   key: value    datasources:            # Required: Backend definitions   - name: \"unique_name\"     backend:       type: \"connector_fs\"  # or \"connector_dbi\" or \"package::function\"       # backend-specific parameters"},{"path":"https://novonordisk-opensource.github.io/connector/CLAUDE.html","id":"testing-architecture","dir":"","previous_headings":"Core Architecture","what":"Testing Architecture","title":"CLAUDE.md","text":"Uses testthat (edition 3) testing framework Test files organized component (test-fs.R, test-dbi.R, test-connect.R) Uses withr::local_tempdir() isolated file system tests Uses RSQLite::SQLite() :memory: database tests Snapshot testing configuration validation error messages","code":""},{"path":"https://novonordisk-opensource.github.io/connector/CLAUDE.html","id":"extension-pattern","dir":"","previous_headings":"Core Architecture","what":"Extension Pattern","title":"CLAUDE.md","text":"New backends : 1. Inherit Connector R6 class 2. Implement required methods class 3. Create constructor function following connector_* naming convention 4. Add S3 method implementations separate *_methods.R file 5. Follow existing testing patterns","code":""},{"path":"https://novonordisk-opensource.github.io/connector/CLAUDE.html","id":"key-dependencies","dir":"","previous_headings":"Core Architecture","what":"Key Dependencies","title":"CLAUDE.md","text":"Core: R6, checkmate, cli, purrr, glue, yaml File /O: fs, readr, arrow, haven, readxl, writexl, vroom Database: DBI, dplyr, dbplyr Logging: zephyr (required), whirl (optional) Development: testthat (edition 3), withr, devtools","code":""},{"path":"https://novonordisk-opensource.github.io/connector/CLAUDE.html","id":"error-handling","dir":"","previous_headings":"Core Architecture","what":"Error Handling","title":"CLAUDE.md","text":"Uses cli::cli_abort() structured error messages Comprehensive parameter validation checkmate Graceful handling optional dependencies requireNamespace() Helpful error messages configuration issues architecture enables consistent user experience across different data sources maintaining extensibility new backends file formats.","code":""},{"path":[]},{"path":"https://novonordisk-opensource.github.io/connector/CLAUDE.html","id":"cicd-pipeline","dir":"","previous_headings":"Development Workflow","what":"CI/CD Pipeline","title":"CLAUDE.md","text":"package uses GitHub Actions continuous integration: - check_current_version: Validates package version compliance - pkgdown: Builds deploys documentation site - coverage: Generates test coverage reports via codecov - megalinter: Runs comprehensive linting across multiple languages","code":""},{"path":"https://novonordisk-opensource.github.io/connector/CLAUDE.html","id":"package-structure","dir":"","previous_headings":"Development Workflow","what":"Package Structure","title":"CLAUDE.md","text":"","code":"R/                          # Core package code ├── connect.R              # Main entry point - connect() function ├── cnt_generics.R         # S3 generic definitions ├── connector.R            # Base R6 Connector class ├── fs*.R                  # File system backend implementation ├── dbi*.R                 # Database backend implementation └── *_methods.R            # S3 method implementations  tests/testthat/            # Test suite ├── test-*.R              # Component tests ├── configs/              # Test configuration files └── scripts/              # Test helper scripts  inst/ ├── config/               # Example configuration files └── examples/             # Usage examples  dev/                      # Development utilities (not included in package)"},{"path":"https://novonordisk-opensource.github.io/connector/CLAUDE.html","id":"configuration-examples","dir":"","previous_headings":"Development Workflow","what":"Configuration Examples","title":"CLAUDE.md","text":"inst/config/ directory contains reference configuration files: - _connector.yml: Basic file system database setup - default_config.yml: Template common patterns - example_for_generic.yml: Generic backend demonstration","code":""},{"path":"https://novonordisk-opensource.github.io/connector/CLAUDE.html","id":"naming-conventions","dir":"","previous_headings":"Development Workflow","what":"Naming Conventions","title":"CLAUDE.md","text":"R6 classes: PascalCase (e.g., ConnectorFS, ConnectorDBI) S3 generics: snake_case _cnt suffix (e.g., read_cnt(), write_cnt()) Constructor functions: connector_* prefix (e.g., connector_fs(), connector_dbi()) Method files: *_methods.R pattern S3 implementations Backend files: Component-based grouping (fs_read.R, fs_write.R, dbi_*.R)","code":""},{"path":"https://novonordisk-opensource.github.io/connector/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://novonordisk-opensource.github.io/connector/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://novonordisk-opensource.github.io/connector/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright 2025 Novo Nordisk A/S, Danish company registration no. 24256790  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://novonordisk-opensource.github.io/connector/articles/Consistent-API.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Understanding Connector Package Methods","text":"realized might confusing users understand method returns value. vignette explains method provides overview general rules. information also helpful developers creating connector packages, outlines method return maintain consistency interoperability different connector packages.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/articles/Consistent-API.html","id":"methods-and-return-values","dir":"Articles","previous_headings":"","what":"Methods and Return Values","title":"Understanding Connector Package Methods","text":"table summarizing methods return values:","code":""},{"path":[]},{"path":"https://novonordisk-opensource.github.io/connector/articles/Consistent-API.html","id":"read_cnt","dir":"Articles","previous_headings":"Detailed Explanations","what":"read_cnt()","title":"Understanding Connector Package Methods","text":"Reads content file returns directly. allows users immediately work data without additional steps.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/articles/Consistent-API.html","id":"write_cnt","dir":"Articles","previous_headings":"Detailed Explanations","what":"write_cnt()","title":"Understanding Connector Package Methods","text":"writing content Connector, method returns Connector object. enables method chaining provides confirmation write operation successful.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/articles/Consistent-API.html","id":"list_content_cnt","dir":"Articles","previous_headings":"Detailed Explanations","what":"list_content_cnt()","title":"Understanding Connector Package Methods","text":"Returns character vector items (files/directories) current Connector allowing users explore content structure.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/articles/Consistent-API.html","id":"remove_cnt","dir":"Articles","previous_headings":"Detailed Explanations","what":"remove_cnt()","title":"Understanding Connector Package Methods","text":"removing file item, method returns Connector object, allowing operations confirming removal successful.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/articles/Consistent-API.html","id":"download_cnt","dir":"Articles","previous_headings":"Detailed Explanations","what":"download_cnt()","title":"Understanding Connector Package Methods","text":"method returns Connector object download operation allow method chaining.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/articles/Consistent-API.html","id":"upload_cnt","dir":"Articles","previous_headings":"Detailed Explanations","what":"upload_cnt()","title":"Understanding Connector Package Methods","text":"Similar download_cnt(), returns Connector object upload, allowing method chaining.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/articles/Consistent-API.html","id":"create_directory_cnt","dir":"Articles","previous_headings":"Detailed Explanations","what":"create_directory_cnt()","title":"Understanding Connector Package Methods","text":"method returns Connector object. open parameter set TRUE, returns new Connector object pointing newly created directory.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/articles/Consistent-API.html","id":"remove_directory_cnt","dir":"Articles","previous_headings":"Detailed Explanations","what":"remove_directory_cnt()","title":"Understanding Connector Package Methods","text":"removing directory, method returns Connector object, allowing operations confirming removal successful.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/articles/Consistent-API.html","id":"upload_directory_cnt","dir":"Articles","previous_headings":"Detailed Explanations","what":"upload_directory_cnt()","title":"Understanding Connector Package Methods","text":"Returns current Connector object new one directory opened (open = TRUE), allowing immediate use uploaded directory.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/articles/Consistent-API.html","id":"download_directory_cnt","dir":"Articles","previous_headings":"Detailed Explanations","what":"download_directory_cnt()","title":"Understanding Connector Package Methods","text":"Returns Connector object allow method chaining.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/articles/Consistent-API.html","id":"tbl_cnt","dir":"Articles","previous_headings":"Detailed Explanations","what":"tbl_cnt()","title":"Understanding Connector Package Methods","text":"method returns content file tabular format. file-based connectors, typically uses read_cnt() get content. database connections (DBI), returns dplyr::tbl() representation data.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/articles/connector.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"connector","text":"connector package provides set functions connect different data sources (databases file systems) read write data using consistent interface. designed generic extensible package, new data sources can added easily. vignette demonstrates use connector package connect either file system database access different types data.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/articles/connector.html","id":"connector-configuration","dir":"Articles","previous_headings":"","what":"Connector configuration","title":"connector","text":"main function package connect(). function, based configuration file list, creates connectors object connector specified data sources. configuration file can list format, JSON, YAML format. input list (configuration file) must following structure: metadata, env, datasources fields allowed. elements must named. datasources mandatory. metadata env must list named character vectors length 1. datasources must list unnamed lists. datasource must named character element name named list element backend. backend, type must provided.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/articles/connector.html","id":"working-example","dir":"Articles","previous_headings":"","what":"Working example","title":"connector","text":"example anyone can run see connector package works. use configuration file provided , uses file system connection type ADaM TFL data. _connector.yml: can see, configuration file contains metadata paths directories data stored, two data sources: adam tfl, using connector_fs backend connect file system folders. Note paths directories defined using metadata variables (e.g., {metadata.adam_path}), allows easily change paths one place. Now, let’s run example: first step create connections data sources. Next, manipulate iris dataset store adam connector. means create subset iris dataset save RDS file adam directory. can also create complex summaries store connector. can also read back data just created filter using read_cnt() function. Finally, can create plot ggplot2 package store tfl connector.","code":"metadata:   adam_path: !expr file.path(getwd(), \"adam\")   tfl_path: !expr file.path(getwd(), \"tfl\")  datasources:   - name: \"adam\"     backend:       type: \"connector::connector_fs\"       path: \"{metadata.adam_path}\"   - name: \"tfl\"     backend:       type: \"connector::connector_fs\"       path: \"{metadata.tfl_path}\" # Load data connections db <- connect() #> ──────────────────────────────────────────────────────────────────────────────── #> Connection to: #> → adam #> • connector::connector_fs #> • /tmp/RtmpNX6wTC/file228339e40d4c/adam #> ──────────────────────────────────────────────────────────────────────────────── #> Connection to: #> → tfl #> • connector::connector_fs #> • /tmp/RtmpNX6wTC/file228339e40d4c/tfl ## Iris data setosa <- iris |>   filter(Species == \"setosa\") ## Store data db$adam |>   write_cnt(setosa, \"setosa.rds\") mean_for_all_iris <- iris |>   group_by(Species) |>   summarise_all(list(mean, median, sd, min, max))  db$adam |>   write_cnt(mean_for_all_iris, \"mean_iris.rds\")  ## List and load data db$adam |>   list_content_cnt() #> [1] \"mean_iris.rds\" \"setosa.rds\" # Read and filter data setosa_filtered <- db$adam |>   read_cnt(\"setosa\") |>   filter(Sepal.Length > 5) #> → Found one file: /tmp/RtmpNX6wTC/file228339e40d4c/adam/setosa.rds # Create a plot plot_setosa <- ggplot(setosa_filtered) +   aes(x = Sepal.Length, y = Sepal.Width) +   geom_point()  ## Store data and plot objects db$tfl |>   write_cnt(plot_setosa$data, \"setosa_data.csv\") db$tfl |>   write_cnt(plot_setosa, \"setosa_plot.rds\")  ## Store plot image tmp_file <- tempfile(fileext = \".png\") ggsave(tmp_file, plot_setosa) #> Saving 7.29 x 4.51 in image db$tfl |>   upload_cnt(tmp_file, \"setosa_plot.png\")  # List all files in the TFL directory db$tfl |>   list_content_cnt() #> [1] \"setosa_data.csv\" \"setosa_plot.png\" \"setosa_plot.rds\""},{"path":"https://novonordisk-opensource.github.io/connector/articles/customize.html","id":"creating-a-new-connector","dir":"Articles","previous_headings":"","what":"Creating a new connector","title":"How to extend connector","text":"can create new connector creating new R6 class inherits Connector: simplest type inheritance, note Connector parent class methods capable e.g. reading (read_cnt()) writing (write_cnt()) data. default methods throws meaningful errors defined method (e.g. write_cnt.my_class()) new connector class. cases want inherit either ConnectorFS ConnectorDBI depending new connector used access files databases respectively. create new connector_project class inherits acts exactly ConnectorFS, instead user provide path folder argument, provide project name, path constructed . way extending connector e.g. relevant inside organisation projects stored common folder structure. now initialize connector_project can see still methods ConnectorFS, path assigned correctly based project argument: can now use connector read write data, just ConnectorFS:","code":"connector_myclass <- R6::R6Class(   \"connector_myclass\",   inherit = Connector )  connector_myclass$new() #> <connector_myclass/Connector> #> Registered methods: #> • `check_resource.Connector()` connector_project <- R6::R6Class(   \"connector_project\",   inherit = ConnectorFS,   public = list(     initialize = function(project) {       private$.project <- project       path <- file.path(tmp, \"my_root_path\", project)       super$initialize(path)     }   ),   private = list(     .project = NULL   ),   active = list(     project = function() {       private$.project     }   ) ) my_project <- connector_project$new(project = \"my_project\")  print(my_project) #> <connector_project/ConnectorFS> #> Inherits from: <Connector> #> Registered methods: #> • `check_resource.ConnectorFS()` #> • `create_directory_cnt.ConnectorFS()` #> • `download_cnt.ConnectorFS()` #> • `download_directory_cnt.ConnectorFS()` #> • `list_content_cnt.ConnectorFS()` #> • `log_read_connector.ConnectorFS()` #> • `log_remove_connector.ConnectorFS()` #> • `log_write_connector.ConnectorFS()` #> • `read_cnt.ConnectorFS()` #> • `remove_cnt.ConnectorFS()` #> • `remove_directory_cnt.ConnectorFS()` #> • `tbl_cnt.ConnectorFS()` #> • `upload_cnt.ConnectorFS()` #> • `upload_directory_cnt.ConnectorFS()` #> • `write_cnt.ConnectorFS()` #> Specifications: #> • path: /tmp/RtmpML3XDP/file23133f210429/my_root_path/my_project #> • project: my_project # First list current content: my_project |>   list_content_cnt() #> character(0)  # Write some content: my_project |>   write_cnt(\"Hello world!\", \"my_file.txt\")  # List content again: my_project |>   list_content_cnt() #> [1] \"my_file.txt\"  # Read the content: my_project |>   read_cnt(\"my_file.txt\") #> → Found one file: /tmp/RtmpML3XDP/file23133f210429/my_root_path/my_project/my_file.txt #> [1] \"Hello world!\""},{"path":"https://novonordisk-opensource.github.io/connector/articles/customize.html","id":"create-custom-generic-method","dir":"Articles","previous_headings":"","what":"Create custom generic method","title":"How to extend connector","text":"connectorgenerics list_content_cnt(), read_cnt(), write_cnt() S3 generics. means can create custom methods new connector class, used generic called, instead one associated parent class. illustrate can take look list_content_cnt() generic: Building example can define custom method list_content_cnt() connector_project class, used instead list_content_cnt.ConnectorFS: course simple example, just prints message calling ConnectorFS method. can now see method available associated connector_project class: use list_content_cnt() my_project object, see custom method used get message:","code":"# Print the generic print(list_content_cnt) #> function (connector_object, ...)  #> { #>     UseMethod(\"list_content_cnt\") #> } #> <bytecode: 0x55d040d93f90> #> <environment: namespace:connector>  # List the registered s3 methods methods(\"list_content_cnt\") |>   cat(sep = \"\\n\") #> list_content_cnt.ConnectorDBI #> list_content_cnt.ConnectorFS #> list_content_cnt.ConnectorLogger #> list_content_cnt.default list_content_cnt.connector_project <- function(connector_object, ...) {   cli::cli_alert(\"Listing content of {connector_object$project}\")   NextMethod() } # List methods again methods(\"list_content_cnt\") |>   cat(sep = \"\\n\") #> list_content_cnt.connector_project #> list_content_cnt.ConnectorDBI #> list_content_cnt.ConnectorFS #> list_content_cnt.ConnectorLogger #> list_content_cnt.default  # Print my_project connector to see associated methods print(my_project) #> <connector_project/ConnectorFS> #> Inherits from: <Connector> #> Registered methods: #> • `list_content_cnt.connector_project()` #> • `check_resource.ConnectorFS()` #> • `create_directory_cnt.ConnectorFS()` #> • `download_cnt.ConnectorFS()` #> • `download_directory_cnt.ConnectorFS()` #> • `log_read_connector.ConnectorFS()` #> • `log_remove_connector.ConnectorFS()` #> • `log_write_connector.ConnectorFS()` #> • `read_cnt.ConnectorFS()` #> • `remove_cnt.ConnectorFS()` #> • `remove_directory_cnt.ConnectorFS()` #> • `tbl_cnt.ConnectorFS()` #> • `upload_cnt.ConnectorFS()` #> • `upload_directory_cnt.ConnectorFS()` #> • `write_cnt.ConnectorFS()` #> Specifications: #> • path: /tmp/RtmpML3XDP/file23133f210429/my_root_path/my_project #> • project: my_project my_project |>   list_content_cnt() #> → Listing content of my_project #> [1] \"my_file.txt\""},{"path":"https://novonordisk-opensource.github.io/connector/articles/customize.html","id":"use-extra-class-for-simple-customization","dir":"Articles","previous_headings":"","what":"Use extra class for simple customization","title":"How to extend connector","text":"just want slightly tweak behavior existing functionality alternative solution use extra_class argument initializing connector. argument adds extra_class first class creating connector, meaning generic dispatch, list_content_cnt(), method class used connector classes. redo two examples make new ConnectorFS extra class extra_class: can see methods ConnectorFS, extra_class now first class class hierarchy. create custom method list_content_cnt() extra_class connector_project : project information course available now, just print path instead, otherwise everything :","code":"my_project_extra <- ConnectorFS$new(   path = file.path(tmp, \"my_root_path\", \"my_project\"),   extra_class = \"my_extra_class\" )  print(my_project_extra) #> <my_extra_class/ConnectorFS> #> Inherits from: <Connector> #> Registered methods: #> • `check_resource.ConnectorFS()` #> • `create_directory_cnt.ConnectorFS()` #> • `download_cnt.ConnectorFS()` #> • `download_directory_cnt.ConnectorFS()` #> • `list_content_cnt.ConnectorFS()` #> • `log_read_connector.ConnectorFS()` #> • `log_remove_connector.ConnectorFS()` #> • `log_write_connector.ConnectorFS()` #> • `read_cnt.ConnectorFS()` #> • `remove_cnt.ConnectorFS()` #> • `remove_directory_cnt.ConnectorFS()` #> • `tbl_cnt.ConnectorFS()` #> • `upload_cnt.ConnectorFS()` #> • `upload_directory_cnt.ConnectorFS()` #> • `write_cnt.ConnectorFS()` #> Specifications: #> • path: /tmp/RtmpML3XDP/file23133f210429/my_root_path/my_project list_content_cnt.my_extra_class <- function(connector_object, ...) {   cli::cli_alert(\"Listing content of {connector_object$path}\")   NextMethod() } # List methods methods(\"list_content_cnt\") #> [1] list_content_cnt.connector_project list_content_cnt.ConnectorDBI*     #> [3] list_content_cnt.ConnectorFS*      list_content_cnt.ConnectorLogger*  #> [5] list_content_cnt.default*          list_content_cnt.my_extra_class    #> see '?methods' for accessing help and source code  # Print my_project_extra connector to see associated methods print(my_project_extra) #> <my_extra_class/ConnectorFS> #> Inherits from: <Connector> #> Registered methods: #> • `list_content_cnt.my_extra_class()` #> • `check_resource.ConnectorFS()` #> • `create_directory_cnt.ConnectorFS()` #> • `download_cnt.ConnectorFS()` #> • `download_directory_cnt.ConnectorFS()` #> • `log_read_connector.ConnectorFS()` #> • `log_remove_connector.ConnectorFS()` #> • `log_write_connector.ConnectorFS()` #> • `read_cnt.ConnectorFS()` #> • `remove_cnt.ConnectorFS()` #> • `remove_directory_cnt.ConnectorFS()` #> • `tbl_cnt.ConnectorFS()` #> • `upload_cnt.ConnectorFS()` #> • `upload_directory_cnt.ConnectorFS()` #> • `write_cnt.ConnectorFS()` #> Specifications: #> • path: /tmp/RtmpML3XDP/file23133f210429/my_root_path/my_project  # List content to see the new message my_project_extra |>   list_content_cnt() #> → Listing content of /tmp/RtmpML3XDP/file23133f210429/my_root_path/my_project #> [1] \"my_file.txt\""},{"path":"https://novonordisk-opensource.github.io/connector/articles/customize.html","id":"special-handling-of-files","dir":"Articles","previous_headings":"","what":"Special handling of files","title":"How to extend connector","text":"special property file storage connectors (inheriting ConnectorFS) operating files databases. means can handle multiple file formats, also file formats reading writing rectangular data. handling files user use read_cnt() write_cnt() generics, behind scenes following chain functions called: read_cnt() –> read_file() –> read_ext() –> External read function write_cnt() –> write_file() –> write_ext() –> External write function read_cnt() dispatches based class Connector object. file storage connectors (inheriting ConnectorFS) read_file() method called path file. read_file() helper function, calls read_ext() generic dispatches based file extension file, uses general functions packages read file. example file extension .csv read using readr::read_csv(). logic applies write_cnt().","code":""},{"path":"https://novonordisk-opensource.github.io/connector/articles/customize.html","id":"add-new-file-format","dir":"Articles","previous_headings":"Special handling of files","what":"Add new file format","title":"How to extend connector","text":"currently supported file types can seen reference read_cnt() write_cnt() functions respectively. let us imagine want support new imaginary file format myformat. order need create appropriate read_ext() write_ext() methods: can now use write read new file format existing my_project connector:","code":"read_ext.myformat <- function(path, ...) {   cli::cli_alert(\"Reading myformat file\")   readLines(con = path) }  write_ext.myformat <- function(file, x, ...) {   cli::cli_alert(\"Writing myformat file\")   writeLines(text = x, con = file) } # List already existing content: my_project |>   list_content_cnt() #> → Listing content of my_project #> [1] \"my_file.txt\"  # Write some content in myformat: my_project |>   write_cnt(\"Hello new format!\", \"new_file.myformat\") #> → Writing myformat file  # List content again: my_project |>   list_content_cnt() #> → Listing content of my_project #> [1] \"my_file.txt\"       \"new_file.myformat\"  # Read the content: my_project |>   read_cnt(\"new_file.myformat\") #> → Found one file: /tmp/RtmpML3XDP/file23133f210429/my_root_path/my_project/new_file.myformat #> → Reading myformat file #> [1] \"Hello new format!\""},{"path":"https://novonordisk-opensource.github.io/connector/articles/without-yaml.html","id":"creating-individual-connectors","dir":"Articles","previous_headings":"","what":"Creating Individual Connectors","title":"Using connector without YAML files","text":"can create connector objects directly using specific connector functions:","code":""},{"path":"https://novonordisk-opensource.github.io/connector/articles/without-yaml.html","id":"file-system-connector","dir":"Articles","previous_headings":"Creating Individual Connectors","what":"File System Connector","title":"Using connector without YAML files","text":"","code":"# Create a file system connector fs_conn <- connector_fs(path = \"data\") fs_conn #> <ConnectorFS> #> Inherits from: <Connector> #> Registered methods: #> • `check_resource.ConnectorFS()` #> • `create_directory_cnt.ConnectorFS()` #> • `download_cnt.ConnectorFS()` #> • `download_directory_cnt.ConnectorFS()` #> • `list_content_cnt.ConnectorFS()` #> • `log_read_connector.ConnectorFS()` #> • `log_remove_connector.ConnectorFS()` #> • `log_write_connector.ConnectorFS()` #> • `read_cnt.ConnectorFS()` #> • `remove_cnt.ConnectorFS()` #> • `remove_directory_cnt.ConnectorFS()` #> • `tbl_cnt.ConnectorFS()` #> • `upload_cnt.ConnectorFS()` #> • `upload_directory_cnt.ConnectorFS()` #> • `write_cnt.ConnectorFS()` #> Specifications: #> • path: data"},{"path":"https://novonordisk-opensource.github.io/connector/articles/without-yaml.html","id":"database-connector","dir":"Articles","previous_headings":"Creating Individual Connectors","what":"Database Connector","title":"Using connector without YAML files","text":"","code":"# Create a database connector (using SQLite) if (requireNamespace(\"RSQLite\", quietly = TRUE)) {   db_conn <- connector_dbi(     drv = RSQLite::SQLite(),     dbname = \":memory:\"   )   db_conn } #> <ConnectorDBI> #> Inherits from: <Connector> #> Registered methods: #> • `disconnect_cnt.ConnectorDBI()` #> • `list_content_cnt.ConnectorDBI()` #> • `log_read_connector.ConnectorDBI()` #> • `log_remove_connector.ConnectorDBI()` #> • `log_write_connector.ConnectorDBI()` #> • `read_cnt.ConnectorDBI()` #> • `remove_cnt.ConnectorDBI()` #> • `tbl_cnt.ConnectorDBI()` #> • `write_cnt.ConnectorDBI()` #> • `check_resource.Connector()` #> Specifications: #> • conn: <SQLiteConnection>"},{"path":"https://novonordisk-opensource.github.io/connector/articles/without-yaml.html","id":"using-individual-connectors","dir":"Articles","previous_headings":"","what":"Using Individual Connectors","title":"Using connector without YAML files","text":"","code":"# Write and read data sample_data <- mtcars[1:5, 1:3]  fs_conn |> write_cnt(sample_data, \"cars.csv\") fs_conn |> list_content_cnt() #> [1] \"cars.csv\"  retrieved_data <- fs_conn |> read_cnt(\"cars.csv\") #> → Found one file: data/cars.csv #> Rows: 5 Columns: 3 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> dbl (3): mpg, cyl, disp #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. head(retrieved_data) #> # A tibble: 5 × 3 #>     mpg   cyl  disp #>   <dbl> <dbl> <dbl> #> 1  21       6   160 #> 2  21       6   160 #> 3  22.8     4   108 #> 4  21.4     6   258 #> 5  18.7     8   360"},{"path":"https://novonordisk-opensource.github.io/connector/articles/without-yaml.html","id":"creating-multiple-connectors-with-connectors","dir":"Articles","previous_headings":"","what":"Creating Multiple Connectors with connectors()","title":"Using connector without YAML files","text":"connectors() function lets group multiple connector objects together:","code":"# Create a collection of connectors my_connectors <- connectors(   raw = connector_fs(path = \"raw\"),   processed = connector_fs(path = \"processed\") )  my_connectors #> <connectors> #>   $raw <ConnectorFS> #>   $processed <ConnectorFS>"},{"path":"https://novonordisk-opensource.github.io/connector/articles/without-yaml.html","id":"working-with-multiple-connectors","dir":"Articles","previous_headings":"","what":"Working with Multiple Connectors","title":"Using connector without YAML files","text":"","code":"# Use different connectors for different purposes iris_sample <- iris[1:10, ]  # Store raw data my_connectors$raw |> write_cnt(iris_sample, \"iris_raw.rds\")  # Process data processed <- iris_sample |>   group_by(Species) |>   summarise(mean_length = mean(Sepal.Length))  # Store processed data my_connectors$processed |> write_cnt(processed, \"iris_summary.csv\")  # Check contents of each connector my_connectors$raw |> list_content_cnt() #> [1] \"iris_raw.rds\" my_connectors$processed |> list_content_cnt() #> [1] \"iris_summary.csv\""},{"path":"https://novonordisk-opensource.github.io/connector/articles/without-yaml.html","id":"mixed-storage-types","dir":"Articles","previous_headings":"","what":"Mixed Storage Types","title":"Using connector without YAML files","text":"can combine different types connectors:","code":"if (requireNamespace(\"RSQLite\", quietly = TRUE)) {   # Mix file system and database connectors   mixed_connectors <- connectors(     files = connector_fs(path = \"output\"),     database = connector_dbi(RSQLite::SQLite(), dbname = \":memory:\")   )    # Same data, different storage   test_data <- data.frame(x = 1:3, y = letters[1:3])    mixed_connectors$files |> write_cnt(test_data, \"test.csv\")   mixed_connectors$database |> write_cnt(test_data, \"test_table\")    # List contents   mixed_connectors$files |> list_content_cnt()   mixed_connectors$database |> list_content_cnt() } #> [1] \"test_table\""},{"path":"https://novonordisk-opensource.github.io/connector/articles/without-yaml.html","id":"nested-connectors-with-nested_connectors","dir":"Articles","previous_headings":"","what":"Nested Connectors with nested_connectors()","title":"Using connector without YAML files","text":"can group multiple connectors() objects together using nested_connectors(): Now can access connectors nested structure:","code":"# Create connectors for different projects project_a <- connectors(   raw = connector_fs(path = \"raw\"),   processed = connector_fs(path = \"processed\") )  project_b <- connectors(   data = connector_fs(path = \"data\"),   output = connector_fs(path = \"output\") )  # Group them in a nested structure all_projects <- nested_connectors(   project_a = project_a,   project_b = project_b )  all_projects #> <nested_connectors> #>   $project_a <connectors> #>   $project_b <connectors> # Access connectors through nested structure sample_data <- data.frame(x = 1:3, y = letters[1:3])  # Project A operations all_projects$project_a$raw |> write_cnt(sample_data, \"sample.rds\") all_projects$project_a$raw |> list_content_cnt() #> [1] \"iris_raw.rds\" \"sample.rds\"  # Project B operations all_projects$project_b$data |> write_cnt(sample_data, \"input.csv\") all_projects$project_b$data |> list_content_cnt() #> [1] \"cars.csv\"  \"input.csv\""},{"path":"https://novonordisk-opensource.github.io/connector/articles/without-yaml.html","id":"benefits-of-using-connectors","dir":"Articles","previous_headings":"","what":"Benefits of Using connectors()","title":"Using connector without YAML files","text":"Organization: Group related storage locations together Flexibility: Mix different storage types (files, databases) Consistency: interface storage types Clarity: Named connectors make code readable","code":""},{"path":"https://novonordisk-opensource.github.io/connector/articles/without-yaml.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Using connector without YAML files","text":"Use connector_fs() connector_dbi() create individual connectors Use connectors() group multiple connectors together Access individual connectors name: my_connectors$name connectors use functions: write_cnt(), read_cnt(), list_content_cnt(), remove_cnt()","code":""},{"path":"https://novonordisk-opensource.github.io/connector/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Cervan Girard. Author, maintainer. Aksel Thomsen. Author. Vladimir Obucina. Author. Novo Nordisk /S. Copyright holder.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Girard C, Thomsen , Obucina V (2025). connector: Streamlining Data Access Clinical Research. R package version 0.1.1.9005, https://novonordisk-opensource.github.io/connector/.","code":"@Manual{,   title = {connector: Streamlining Data Access in Clinical Research},   author = {Cervan Girard and Aksel Thomsen and Vladimir Obucina},   year = {2025},   note = {R package version 0.1.1.9005},   url = {https://novonordisk-opensource.github.io/connector/}, }"},{"path":[]},{"path":"https://novonordisk-opensource.github.io/connector/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Streamlining Data Access in Clinical Research","text":"connector provides seamless consistent interface connecting different data sources, simple file storage systems databases. also gives option use central configuration file manage connections project, ensures consistent reference data source across different scripts project, enables easily switch different data sources. connector package comes possibilities creating connections file system folders using connector_fs() general databases using connector_dbi(), built top DBI package. connector also series expansion packages allows easily connect specific data sources: {connector.databricks}: Connect Databricks {connector.sharepoint}: Connect SharePoint sites","code":""},{"path":"https://novonordisk-opensource.github.io/connector/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Streamlining Data Access in Clinical Research","text":"","code":"# Install the released version from CRAN: install.packages(\"connector\") # Install the development version from GitHub: pak::pak(\"NovoNordisk-OpenSource/connector\")"},{"path":"https://novonordisk-opensource.github.io/connector/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Streamlining Data Access in Clinical Research","text":"recommended way using connector specify common yaml configuration file project contains connection details data sources. simple example creating connectors folder database shown : _connector.yml: easy initialize file : First specify common metadata connectors, temporary folder want use. Afterwards specify datasources needed project, specifications. first name “folder”, specify type connector_fs(), path folder. second database connector memory SQLite database, specify using connector_dbi() type, uses DBI::dbConnect() initalize connection. Therefore also give DBI driver use, arguments . connect create conenctors use connect() configuration file input: creates connectors objects contains connector. printing individual connector get general information methods specifications. now ready use connectors, can start writing data folder one: parquet format used, using connector_fs possible read write several different file types. See read_file() write_file() information. database connector works way:","code":"metadata:   path: !expr withr::local_tempdir()  datasources:   - name: \"folder\"     backend:         type: \"connector::connector_fs\"         path: \"{metadata.path}\"   - name: \"database\"     backend:         type: \"connector::connector_dbi\"         drv: \"RSQLite::SQLite()\"         dbname: \":memory:\" connector::use_connector() library(connector)  db <- connect(\"_connector.yml\") #> ─────────────────────────────────────────────────── #> Connection to: #> → folder #> • connector::connector_fs #> • /var/folders/kv/q2rqqp3s0s5f9rxn_854l2lm0000gp/T//RtmpMlcjzV/file151272fbf7ccb #> [1] \"ConnectorFS\" \"Connector\"   \"R6\" #> ─────────────────────────────────────────────────── #> Connection to: #> → database #> • connector::connector_dbi #> • RSQLite::SQLite() and :memory:  print(db) #> <connectors> #>   $folder <ConnectorFS> #>   $database <ConnectorDBI> print(db$database) #> <ConnectorDBI> #> Inherits from: <Connector> #> Registered methods: #> • `disconnect_cnt.ConnectorDBI()` #> • `list_content_cnt.ConnectorDBI()` #> • `log_read_connector.ConnectorDBI()` #> • `log_remove_connector.ConnectorDBI()` #> • `log_write_connector.ConnectorDBI()` #> • `read_cnt.ConnectorDBI()` #> • `remove_cnt.ConnectorDBI()` #> • `tbl_cnt.ConnectorDBI()` #> • `write_cnt.ConnectorDBI()` #> Specifications: #> • conn: <SQLiteConnection> # Initially it is empty db$folder |>   list_content_cnt() #> character(0)  # Create some data cars <- mtcars |>   tibble::as_tibble(rownames = \"car\")  # Write to folder as a parquet file db$folder |>   write_cnt(x = cars, name = \"cars.parquet\")  # Now the folder contains the file db$folder |>   list_content_cnt() #> [1] \"cars.parquet\"  # And we can read it back in db$folder |>   read_cnt(name = \"cars.parquet\") #> # A tibble: 32 × 12 #>    car           mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <chr>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1 Mazda RX4    21       6  160    110  3.9   2.62  16.5     0     1     4     4 #>  2 Mazda RX4 …  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #>  3 Datsun 710   22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #>  4 Hornet 4 D…  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #>  5 Hornet Spo…  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  6 Valiant      18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #>  7 Duster 360   14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  8 Merc 240D    24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #>  9 Merc 230     22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 10 Merc 280     19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> # ℹ 22 more rows # Initially no tables exists db$database |>   list_content_cnt() #> character(0)  # Write cars to the database as a table db$database |>   write_cnt(x = cars, name = \"cars\")  # Now the cara table exists db$database |>   list_content_cnt() #> [1] \"cars\"  # And we can read it back in db$database |>   read_cnt(name = \"cars\") |>   dplyr::as_tibble() #> # A tibble: 32 × 12 #>    car           mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <chr>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1 Mazda RX4    21       6  160    110  3.9   2.62  16.5     0     1     4     4 #>  2 Mazda RX4 …  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #>  3 Datsun 710   22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #>  4 Hornet 4 D…  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #>  5 Hornet Spo…  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  6 Valiant      18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #>  7 Duster 360   14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  8 Merc 240D    24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #>  9 Merc 230     22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 10 Merc 280     19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> # ℹ 22 more rows"},{"path":"https://novonordisk-opensource.github.io/connector/index.html","id":"useful-links","dir":"","previous_headings":"","what":"Useful links","title":"Streamlining Data Access in Clinical Research","text":"information use package, see following links: connect() documentation specify configuration file vignette(\"connector\") examples use package vignette(\"customize\") create connector customize behavior help(\"connector-options\") options available customize behavior connector NovoNordisk-OpenSource/R-packages overview connector R packages published Novo Nordisk","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/Connector.html","id":null,"dir":"Reference","previous_headings":"","what":"General connector object — Connector","title":"General connector object — Connector","text":"R6 class general class connectors. used define methods connectors . New connectors inherit class, methods described implemented.","code":""},{"path":[]},{"path":[]},{"path":"https://novonordisk-opensource.github.io/connector/reference/Connector.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"General connector object — Connector","text":"Connector$new() Connector$print() Connector$list_content_cnt() Connector$read_cnt() Connector$write_cnt() Connector$remove_cnt() Connector$clone()","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/Connector.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"General connector object — Connector","text":"Initialize connector option adding extra class.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/Connector.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General connector object — Connector","text":"","code":"Connector$new(extra_class = NULL)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/Connector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"General connector object — Connector","text":"extra_class character Extra class assign new connector.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/Connector.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"General connector object — Connector","text":"Print method connector showing registered methods specifications active bindings.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/Connector.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"General connector object — Connector","text":"","code":"Connector$print()"},{"path":"https://novonordisk-opensource.github.io/connector/reference/Connector.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"General connector object — Connector","text":"invisible self.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/Connector.html","id":"method-list-content-cnt-","dir":"Reference","previous_headings":"","what":"Method list_content_cnt()","title":"General connector object — Connector","text":"List available content connector. See also list_content_cnt.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/Connector.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"General connector object — Connector","text":"","code":"Connector$list_content_cnt(...)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/Connector.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"General connector object — Connector","text":"... Additional arguments passed method individual connector.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/Connector.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"General connector object — Connector","text":"character vector content names","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/Connector.html","id":"method-read-cnt-","dir":"Reference","previous_headings":"","what":"Method read_cnt()","title":"General connector object — Connector","text":"Read content connector. See also read_cnt.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/Connector.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"General connector object — Connector","text":"","code":"Connector$read_cnt(name, ...)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/Connector.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"General connector object — Connector","text":"name character Name content read, write, remove. Typically table name. ... Additional arguments passed method individual connector.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/Connector.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"General connector object — Connector","text":"R object content. rectangular data data.frame.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/Connector.html","id":"method-write-cnt-","dir":"Reference","previous_headings":"","what":"Method write_cnt()","title":"General connector object — Connector","text":"Write content connector.See also write_cnt.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/Connector.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"General connector object — Connector","text":"","code":"Connector$write_cnt(x, name, ...)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/Connector.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"General connector object — Connector","text":"x object write connection name character Name content read, write, remove. Typically table name. ... Additional arguments passed method individual connector.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/Connector.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"General connector object — Connector","text":"invisible self.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/Connector.html","id":"method-remove-cnt-","dir":"Reference","previous_headings":"","what":"Method remove_cnt()","title":"General connector object — Connector","text":"Remove delete content connector. See also remove_cnt.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/Connector.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"General connector object — Connector","text":"","code":"Connector$remove_cnt(name, ...)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/Connector.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"General connector object — Connector","text":"name character Name content read, write, remove. Typically table name. ... Additional arguments passed method individual connector.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/Connector.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"General connector object — Connector","text":"invisible self.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/Connector.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"General connector object — Connector","text":"objects class cloneable method.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/Connector.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"General connector object — Connector","text":"","code":"Connector$clone(deep = FALSE)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/Connector.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"General connector object — Connector","text":"deep Whether make deep clone.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/Connector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"General connector object — Connector","text":"","code":"# Create connector cnt <- Connector$new()  cnt #> <Connector> #> Registered methods: #> • `check_resource.Connector()`  # Standard error message if no method is implemented cnt |>   read_cnt(\"fake_data\") |>   try() #> Error in method_error_msg(connector_object) :  #>   Method not implemented for class <Connector/R6> #> ℹ See the customize (`vignette(connector::customize)`) vignette on how to #>   create custom connectors and methods  # Connection with extra class cnt_my_class <- Connector$new(extra_class = \"my_class\")  cnt_my_class #> <my_class/Connector> #> Registered methods: #> • `check_resource.Connector()`  # Custom method for the extra class read_cnt.my_class <- function(connector_object) \"Hello!\" registerS3method(\"read_cnt\", \"my_class\", \"read_cnt.my_class\")  cnt_my_class #> <my_class/Connector> #> Registered methods: #> • `read_cnt.my_class()` #> • `check_resource.Connector()`  read_cnt(cnt_my_class) #> [1] \"Hello!\""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorDBI.html","id":null,"dir":"Reference","previous_headings":"","what":"Connector for DBI databases — ConnectorDBI","title":"Connector for DBI databases — ConnectorDBI","text":"Connector object DBI connections. object used interact DBI compliant database backends. See DBI package backends supported.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorDBI.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Connector for DBI databases — ConnectorDBI","text":"recommend using wrapper function connector_dbi() simplify process creating object ConnectorDBI class. provides intuitive user-friendly approach initialize ConnectorFS class associated functionalities. Upon garbage collection, connection try disconnect database. good practice call disconnect_cnt done connection.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorDBI.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Connector for DBI databases — ConnectorDBI","text":"connector::Connector -> ConnectorDBI","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorDBI.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Connector for DBI databases — ConnectorDBI","text":"conn DBI connection. Inherits DBI::DBIConnector","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorDBI.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Connector for DBI databases — ConnectorDBI","text":"connector::Connector$list_content_cnt() connector::Connector$print() connector::Connector$read_cnt() connector::Connector$remove_cnt() connector::Connector$write_cnt()","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorDBI.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Connector for DBI databases — ConnectorDBI","text":"ConnectorDBI$new() ConnectorDBI$disconnect_cnt() ConnectorDBI$tbl_cnt() ConnectorDBI$clone()","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorDBI.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Connector for DBI databases — ConnectorDBI","text":"Initialize connection","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorDBI.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connector for DBI databases — ConnectorDBI","text":"","code":"ConnectorDBI$new(drv, ..., extra_class = NULL)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorDBI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connector for DBI databases — ConnectorDBI","text":"drv Driver object inheriting DBI::DBIDriver. ... Additional arguments passed DBI::dbConnect(). extra_class character Extra class assign new connector.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorDBI.html","id":"method-disconnect-cnt-","dir":"Reference","previous_headings":"","what":"Method disconnect_cnt()","title":"Connector for DBI databases — ConnectorDBI","text":"Disconnect database. See also disconnect_cnt.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorDBI.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Connector for DBI databases — ConnectorDBI","text":"","code":"ConnectorDBI$disconnect_cnt()"},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorDBI.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Connector for DBI databases — ConnectorDBI","text":"invisible self.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorDBI.html","id":"method-tbl-cnt-","dir":"Reference","previous_headings":"","what":"Method tbl_cnt()","title":"Connector for DBI databases — ConnectorDBI","text":"Use dplyr verbs interact remote database table. See also tbl_cnt.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorDBI.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Connector for DBI databases — ConnectorDBI","text":"","code":"ConnectorDBI$tbl_cnt(name, ...)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorDBI.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connector for DBI databases — ConnectorDBI","text":"name character Name content read, write, remove. Typically table name. ... Additional arguments passed method individual connector.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorDBI.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Connector for DBI databases — ConnectorDBI","text":"dplyr::tbl object.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorDBI.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Connector for DBI databases — ConnectorDBI","text":"objects class cloneable method.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorDBI.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Connector for DBI databases — ConnectorDBI","text":"","code":"ConnectorDBI$clone(deep = FALSE)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorDBI.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connector for DBI databases — ConnectorDBI","text":"deep Whether make deep clone.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorDBI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connector for DBI databases — ConnectorDBI","text":"","code":"# Create DBI connector cnt <- ConnectorDBI$new(RSQLite::SQLite(), \":memory:\") cnt #> <ConnectorDBI> #> Inherits from: <Connector> #> Registered methods: #> • `disconnect_cnt.ConnectorDBI()` #> • `list_content_cnt.ConnectorDBI()` #> • `log_read_connector.ConnectorDBI()` #> • `log_remove_connector.ConnectorDBI()` #> • `log_write_connector.ConnectorDBI()` #> • `read_cnt.ConnectorDBI()` #> • `remove_cnt.ConnectorDBI()` #> • `tbl_cnt.ConnectorDBI()` #> • `write_cnt.ConnectorDBI()` #> • `check_resource.Connector()` #> Specifications: #> • conn: <SQLiteConnection>  # You can do the same thing using wrapper function connector_dbi() cnt <- connector_dbi(RSQLite::SQLite(), \":memory:\") cnt #> <ConnectorDBI> #> Inherits from: <Connector> #> Registered methods: #> • `disconnect_cnt.ConnectorDBI()` #> • `list_content_cnt.ConnectorDBI()` #> • `log_read_connector.ConnectorDBI()` #> • `log_remove_connector.ConnectorDBI()` #> • `log_write_connector.ConnectorDBI()` #> • `read_cnt.ConnectorDBI()` #> • `remove_cnt.ConnectorDBI()` #> • `tbl_cnt.ConnectorDBI()` #> • `write_cnt.ConnectorDBI()` #> • `check_resource.Connector()` #> Specifications: #> • conn: <SQLiteConnection> # Write to the database cnt$write_cnt(iris, \"iris\")  # Read from the database cnt$read_cnt(\"iris\") |>   head() #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6          5.4         3.9          1.7         0.4  setosa  # List available tables cnt$list_content_cnt() #> [1] \"iris\"  # Use the connector to run a query cnt$conn #> <SQLiteConnection> #>   Path: :memory: #>   Extensions: TRUE  cnt$conn |>   DBI::dbGetQuery(\"SELECT * FROM iris limit 5\") #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa  # Use dplyr verbs and collect data cnt$tbl_cnt(\"iris\") |>   dplyr::filter(Sepal.Length > 7) |>   dplyr::collect() #> # A tibble: 12 × 5 #>    Sepal.Length Sepal.Width Petal.Length Petal.Width Species   #>           <dbl>       <dbl>        <dbl>       <dbl> <chr>     #>  1          7.1         3            5.9         2.1 virginica #>  2          7.6         3            6.6         2.1 virginica #>  3          7.3         2.9          6.3         1.8 virginica #>  4          7.2         3.6          6.1         2.5 virginica #>  5          7.7         3.8          6.7         2.2 virginica #>  6          7.7         2.6          6.9         2.3 virginica #>  7          7.7         2.8          6.7         2   virginica #>  8          7.2         3.2          6           1.8 virginica #>  9          7.2         3            5.8         1.6 virginica #> 10          7.4         2.8          6.1         1.9 virginica #> 11          7.9         3.8          6.4         2   virginica #> 12          7.7         3            6.1         2.3 virginica  # Disconnect from the database cnt$disconnect_cnt()"},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":null,"dir":"Reference","previous_headings":"","what":"Connector for file storage — ConnectorFS","title":"Connector for file storage — ConnectorFS","text":"ConnectorFS class file storage connector accessing manipulating files file storage solution. default implementation includes methods files stored local network drives.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Connector for file storage — ConnectorFS","text":"recommend using wrapper function connector_fs() simplify process creating object ConnectorFS class. provides intuitive user-friendly approach initialize ConnectorFS class associated functionalities.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Connector for file storage — ConnectorFS","text":"connector::Connector -> ConnectorFS","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Connector for file storage — ConnectorFS","text":"path character Path file storage","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Connector for file storage — ConnectorFS","text":"connector::Connector$list_content_cnt() connector::Connector$print() connector::Connector$read_cnt() connector::Connector$remove_cnt() connector::Connector$write_cnt()","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Connector for file storage — ConnectorFS","text":"ConnectorFS$new() ConnectorFS$download_cnt() ConnectorFS$upload_cnt() ConnectorFS$create_directory_cnt() ConnectorFS$remove_directory_cnt() ConnectorFS$upload_directory_cnt() ConnectorFS$download_directory_cnt() ConnectorFS$tbl_cnt() ConnectorFS$clone()","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Connector for file storage — ConnectorFS","text":"Initializes connector file storage.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connector for file storage — ConnectorFS","text":"","code":"ConnectorFS$new(path, extra_class = NULL)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connector for file storage — ConnectorFS","text":"path character Path file storage. extra_class character Extra class assign new connector.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"method-download-cnt-","dir":"Reference","previous_headings":"","what":"Method download_cnt()","title":"Connector for file storage — ConnectorFS","text":"Download content file storage. See also download_cnt.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Connector for file storage — ConnectorFS","text":"","code":"ConnectorFS$download_cnt(src, dest = basename(src), ...)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connector for file storage — ConnectorFS","text":"src character name file download connector dest character Path file download ... Additional arguments passed method individual connector.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Connector for file storage — ConnectorFS","text":"invisible connector_object.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"method-upload-cnt-","dir":"Reference","previous_headings":"","what":"Method upload_cnt()","title":"Connector for file storage — ConnectorFS","text":"Upload file file storage. See also upload_cnt.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Connector for file storage — ConnectorFS","text":"","code":"ConnectorFS$upload_cnt(src, dest = basename(src), ...)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connector for file storage — ConnectorFS","text":"src character Path file upload dest character name file create ... Additional arguments passed method individual connector.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Connector for file storage — ConnectorFS","text":"invisible self.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"method-create-directory-cnt-","dir":"Reference","previous_headings":"","what":"Method create_directory_cnt()","title":"Connector for file storage — ConnectorFS","text":"Create directory file storage. See also create_directory_cnt.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Connector for file storage — ConnectorFS","text":"","code":"ConnectorFS$create_directory_cnt(name, ...)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connector for file storage — ConnectorFS","text":"name character name directory create ... Additional arguments passed method individual connector.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Connector for file storage — ConnectorFS","text":"ConnectorFS object newly created directory","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"method-remove-directory-cnt-","dir":"Reference","previous_headings":"","what":"Method remove_directory_cnt()","title":"Connector for file storage — ConnectorFS","text":"Remove directory file storage. See also remove_directory_cnt.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Connector for file storage — ConnectorFS","text":"","code":"ConnectorFS$remove_directory_cnt(name, ...)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connector for file storage — ConnectorFS","text":"name character name directory remove ... Additional arguments passed method individual connector.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Connector for file storage — ConnectorFS","text":"invisible self.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"method-upload-directory-cnt-","dir":"Reference","previous_headings":"","what":"Method upload_directory_cnt()","title":"Connector for file storage — ConnectorFS","text":"Upload directory file storage. See also upload_directory_cnt.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Connector for file storage — ConnectorFS","text":"","code":"ConnectorFS$upload_directory_cnt(src, dest = basename(src), ...)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connector for file storage — ConnectorFS","text":"src character path directory upload dest character name directory create ... Additional arguments passed method individual connector.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Connector for file storage — ConnectorFS","text":"invisible self.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"method-download-directory-cnt-","dir":"Reference","previous_headings":"","what":"Method download_directory_cnt()","title":"Connector for file storage — ConnectorFS","text":"Download directory file storage. See also download_directory_cnt.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Connector for file storage — ConnectorFS","text":"","code":"ConnectorFS$download_directory_cnt(src, dest = basename(src), ...)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connector for file storage — ConnectorFS","text":"src character name directory download connector dest character path directory download ... Additional arguments passed method individual connector.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Connector for file storage — ConnectorFS","text":"invisible connector_object.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"method-tbl-cnt-","dir":"Reference","previous_headings":"","what":"Method tbl_cnt()","title":"Connector for file storage — ConnectorFS","text":"Use dplyr verbs interact tibble. See also tbl_cnt.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Connector for file storage — ConnectorFS","text":"","code":"ConnectorFS$tbl_cnt(name, ...)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connector for file storage — ConnectorFS","text":"name character Name content read, write, remove. Typically table name. ... Additional arguments passed method individual connector.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Connector for file storage — ConnectorFS","text":"table object.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Connector for file storage — ConnectorFS","text":"objects class cloneable method.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Connector for file storage — ConnectorFS","text":"","code":"ConnectorFS$clone(deep = FALSE)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connector for file storage — ConnectorFS","text":"deep Whether make deep clone.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorFS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connector for file storage — ConnectorFS","text":"","code":"# Create file storage connector  folder <- withr::local_tempdir()  dir.create(folder)  cnt <- ConnectorFS$new(folder) cnt #> <ConnectorFS> #> Inherits from: <Connector> #> Registered methods: #> • `check_resource.ConnectorFS()` #> • `create_directory_cnt.ConnectorFS()` #> • `download_cnt.ConnectorFS()` #> • `download_directory_cnt.ConnectorFS()` #> • `list_content_cnt.ConnectorFS()` #> • `log_read_connector.ConnectorFS()` #> • `log_remove_connector.ConnectorFS()` #> • `log_write_connector.ConnectorFS()` #> • `read_cnt.ConnectorFS()` #> • `remove_cnt.ConnectorFS()` #> • `remove_directory_cnt.ConnectorFS()` #> • `tbl_cnt.ConnectorFS()` #> • `upload_cnt.ConnectorFS()` #> • `upload_directory_cnt.ConnectorFS()` #> • `write_cnt.ConnectorFS()` #> Specifications: #> • path: /tmp/RtmpL7fsh0/file1e963b8ce585  # You can do the same thing using wrapper function connector_fs() cnt <- connector_fs(folder) cnt #> <ConnectorFS> #> Inherits from: <Connector> #> Registered methods: #> • `check_resource.ConnectorFS()` #> • `create_directory_cnt.ConnectorFS()` #> • `download_cnt.ConnectorFS()` #> • `download_directory_cnt.ConnectorFS()` #> • `list_content_cnt.ConnectorFS()` #> • `log_read_connector.ConnectorFS()` #> • `log_remove_connector.ConnectorFS()` #> • `log_write_connector.ConnectorFS()` #> • `read_cnt.ConnectorFS()` #> • `remove_cnt.ConnectorFS()` #> • `remove_directory_cnt.ConnectorFS()` #> • `tbl_cnt.ConnectorFS()` #> • `upload_cnt.ConnectorFS()` #> • `upload_directory_cnt.ConnectorFS()` #> • `write_cnt.ConnectorFS()` #> Specifications: #> • path: /tmp/RtmpL7fsh0/file1e963b8ce585  # List content cnt$list_content_cnt() #> character(0)  # Write to the connector cnt$write_cnt(iris, \"iris.rds\")  # Check it is there cnt$list_content_cnt() #> [1] \"iris.rds\"  # Read the result back cnt$read_cnt(\"iris.rds\") |>   head() #> → Found one file: /tmp/RtmpL7fsh0/file1e963b8ce585/iris.rds #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6          5.4         3.9          1.7         0.4  setosa"},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorLogger.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a New Connector Logger — ConnectorLogger","title":"Create a New Connector Logger — ConnectorLogger","text":"Creates new empty connector logger object class \"ConnectorLogger\". S3 class constructor initializes logging structure connector operations.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorLogger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a New Connector Logger — ConnectorLogger","text":"","code":"ConnectorLogger  # S3 method for class 'ConnectorLogger' print(x, ...)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorLogger.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Create a New Connector Logger — ConnectorLogger","text":"object class ConnectorLogger length 0.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorLogger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a New Connector Logger — ConnectorLogger","text":"x object print ... parameters passed print method","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorLogger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a New Connector Logger — ConnectorLogger","text":"S3 object class \"ConnectorLogger\" containing: empty list Class attribute set \"ConnectorLogger\"","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorLogger.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a New Connector Logger — ConnectorLogger","text":"Create New Connector Logger","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/ConnectorLogger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a New Connector Logger — ConnectorLogger","text":"","code":"logger <- ConnectorLogger class(logger) # Returns \"ConnectorLogger\" #> [1] \"ConnectorLogger\" str(logger) # Shows empty list with class attribute #>  list() #>  - attr(*, \"class\")= chr \"ConnectorLogger\""},{"path":"https://novonordisk-opensource.github.io/connector/reference/add_datasource.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a new datasource to a YAML configuration file — add_datasource","title":"Add a new datasource to a YAML configuration file — add_datasource","text":"function adds new datasource YAML configuration file appending provided datasource information existing datasources.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/add_datasource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a new datasource to a YAML configuration file — add_datasource","text":"","code":"add_datasource(config_path, name, backend)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/add_datasource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a new datasource to a YAML configuration file — add_datasource","text":"config_path file path YAML configuration file name name new datasource backend named list representing backend configuration new datasource","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/add_datasource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a new datasource to a YAML configuration file — add_datasource","text":"(invisible) config_path configuration updated","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/add_datasource.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a new datasource to a YAML configuration file — add_datasource","text":"","code":"config <- tempfile(fileext = \".yml\")  file.copy(   from = system.file(\"config\", \"_connector.yml\", package = \"connector\"),   to = config ) #> [1] TRUE  config |>   add_datasource(     name = \"new_datasource\",     backend = list(type = \"connector_fs\", path = \"new_path\")   )"},{"path":"https://novonordisk-opensource.github.io/connector/reference/add_logs.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Logging Capability to Connections — add_logs","title":"Add Logging Capability to Connections — add_logs","text":"function adds logging capability list connections modifying class attributes. ensures input correct type registers necessary S3 methods logging.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/add_logs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Logging Capability to Connections — add_logs","text":"","code":"add_logs(connections)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/add_logs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Logging Capability to Connections — add_logs","text":"connections object class connectors(). list connection objects logging capability added.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/add_logs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Logging Capability to Connections — add_logs","text":"modified connections object logging capability added. connection list \"ConnectorLogger\" class prepended existing classes.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/add_logs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Logging Capability to Connections — add_logs","text":"function performs following steps: Checks input connections class \"connectors\". Iterates connection list prepends \"ConnectorLogger\" class.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/add_logs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Logging Capability to Connections — add_logs","text":"","code":"con <- connectors(   sdtm = connector_fs(path = tempdir())  )  logged_connections <- add_logs(con)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/add_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Add metadata to a YAML configuration file — add_metadata","title":"Add metadata to a YAML configuration file — add_metadata","text":"function adds metadata YAML configuration file modifying provided key-value pair metadata section file.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/add_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add metadata to a YAML configuration file — add_metadata","text":"","code":"add_metadata(config_path, key, value)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/add_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add metadata to a YAML configuration file — add_metadata","text":"config_path file path YAML configuration file key key new metadata entry value value new metadata entry","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/add_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add metadata to a YAML configuration file — add_metadata","text":"(invisible) config_path configuration updated","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/add_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add metadata to a YAML configuration file — add_metadata","text":"","code":"config <- tempfile(fileext = \".yml\")  file.copy(   from = system.file(\"config\", \"_connector.yml\", package = \"connector\"),   to = config ) #> [1] TRUE  config |>   add_metadata(     key = \"new_metadata\",     value = \"new_value\"   )"},{"path":"https://novonordisk-opensource.github.io/connector/reference/connect.html","id":null,"dir":"Reference","previous_headings":"","what":"Connect to datasources specified in a config file — connect","title":"Connect to datasources specified in a config file — connect","text":"Based configuration file list functions creates connectors() object Connector specified datasources. configuration file can format can read read_file(), contains list. yaml file provided, expressions evaluated parsing using yaml::read_yaml() eval.expr = TRUE. See also vignette(\"connector\") use configuration files project, details required structure configuration.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/connect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect to datasources specified in a config file — connect","text":"","code":"connect(   config = \"_connector.yml\",   metadata = NULL,   datasource = NULL,   set_env = TRUE,   logging = zephyr::get_option(\"logging\", \"connector\") )"},{"path":"https://novonordisk-opensource.github.io/connector/reference/connect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect to datasources specified in a config file — connect","text":"config character path connector config file list specifications metadata list Replace, add create elements metadata field found config datasource character Name(s) datasource(s) connect . NULL (default) datasources connected. set_env logical environment variables yaml file set? Default TRUE. logging Add logs console well whirl log html files. Default: FALSE.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/connect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connect to datasources specified in a config file — connect","text":"connectors","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/connect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Connect to datasources specified in a config file — connect","text":"input list can specified two ways: named list containing specifications single connectors object. unnamed list, element structure 1., returns nested connectors object. See example . specification single connectors  following structure: name, metadata, env datasources allowed. elements must named. name required using nested connectors. datasources mandatory. metadata env must list named character vectors length 1 specified. datasources must list unnamed lists. datasource must named character element name named list element backend connection backend.type must provided","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/connect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connect to datasources specified in a config file — connect","text":"","code":"withr::with_tempdir({ # Create dir for the example in tmpdir dir.create(\"example/demo_trial/adam\", recursive = TRUE)  config <- system.file(\"config\", \"_connector.yml\", package = \"connector\")  config  # Show the raw configuration file readLines(config) |>   cat(sep = \"\\n\")  # Connect to the datasources specified in it cnts <- connect(config) cnts  # Content of each connector  cnts$adam cnts$sdtm  # Overwrite metadata informations  connect(config, metadata = list(extra_class = \"my_class\"))  # Connect only to the adam datasource  connect(config, datasource = \"adam\")  # Connect to several projects in a nested structure  config_nested <- system.file(\"config\", \"_nested_connector.yml\", package = \"connector\")  readLines(config_nested) |>   cat(sep = \"\\n\")  cnts_nested <- connect(config_nested)  cnts_nested  cnts_nested$study1  }) #> # A example of the configuration file for FS and Database #> metadata: #>   trial: \"demo_trial\" #>   root_path: \"example\" #>   extra_class: \"test2\" #>  #> datasources: #>   - name: \"adam\" #>     backend: #>         type: \"connector_fs\" #>         path: \"{metadata.root_path}/{metadata.trial}/adam\" #>         extra_class: \"{metadata.extra_class}\" #>   - name: \"sdtm\" #>     backend: #>         type: \"connector_dbi\" #>         drv: \"RSQLite::SQLite()\" #>         dbname: \":memory:\" #> ──────────────────────────────────────────────────────────────────────────────── #> Connection to: #> → adam #> • connector_fs #> • example/demo_trial/adam and test2 #> ──────────────────────────────────────────────────────────────────────────────── #> Connection to: #> → sdtm #> • connector_dbi #> • RSQLite::SQLite() and :memory: #> ℹ Replace some metadata informations... #> ──────────────────────────────────────────────────────────────────────────────── #> Connection to: #> → adam #> • connector_fs #> • example/demo_trial/adam and my_class #> ──────────────────────────────────────────────────────────────────────────────── #> Connection to: #> → sdtm #> • connector_dbi #> • RSQLite::SQLite() and :memory: #> ──────────────────────────────────────────────────────────────────────────────── #> Connection to: #> → adam #> • connector_fs #> • example/demo_trial/adam and test2 #> # A example of the configuration file nested connectors #> - name: \"study1\" #>   metadata: #>     trial: \"demo_trial\" #>     root_path: \"example\" #>   datasources: #>     - name: \"adam_fs\" #>       backend: #>           type: \"connector_fs\" #>           path: \"{metadata.root_path}/{metadata.trial}/adam\" #>  #> - name: \"study2\" #>   metadata: #>     trial: \"demo_trial\" #>     root_path: \"example\" #>   datasources: #>     - name: \"adam_fs\" #>       backend: #>           type: \"connector_fs\" #>           path: \"{metadata.root_path}/{metadata.trial}/adam\" #> ──────────────────────────────────────────────────────────────────────────────── #> Connection to: #> → adam_fs #> • connector_fs #> • example/demo_trial/adam #> ──────────────────────────────────────────────────────────────────────────────── #> Connection to: #> → adam_fs #> • connector_fs #> • example/demo_trial/adam #> <connectors> #>   $adam_fs <ConnectorFS> #>    #>   Metadata: #>   → trial: \"demo_trial\" #>   → root_path: \"example\""},{"path":"https://novonordisk-opensource.github.io/connector/reference/connector-options-params.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal parameters for reuse in functions — connector-options-params","title":"Internal parameters for reuse in functions — connector-options-params","text":"Internal parameters reuse functions","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/connector-options-params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal parameters for reuse in functions — connector-options-params","text":"verbosity_level Verbosity level functions connector. See zephyr::verbosity_level details.. Default: \"verbose\". overwrite Overwrite existing content exists connector? See connector-options details. Default can set globally options(connector.overwrite = TRUE/FALSE) environment variable R_CONNECTOR_OVERWRITE.. Default: FALSE. logging Add logs console well whirl log html files. Default: FALSE. default_ext Default extension use writing reading files. Default: \"csv\".","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/connector-options-params.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Internal parameters for reuse in functions — connector-options-params","text":"See connector-options information.","code":""},{"path":[]},{"path":"https://novonordisk-opensource.github.io/connector/reference/connector-options.html","id":"verbosity-level","dir":"Reference","previous_headings":"","what":"verbosity_level","title":"Options for connector — connector-options","text":"Verbosity level functions connector. See zephyr::verbosity_level details. Default: \"verbose\" Option: connector.verbosity_level Environment: R_CONNECTOR_VERBOSITY_LEVEL","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/connector-options.html","id":"overwrite","dir":"Reference","previous_headings":"","what":"overwrite","title":"Options for connector — connector-options","text":"Overwrite existing content exists connector? See connector-options details. Default can set globally options(connector.overwrite = TRUE/FALSE) environment variable R_CONNECTOR_OVERWRITE. Default: FALSE Option: connector.overwrite Environment: R_CONNECTOR_OVERWRITE","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/connector-options.html","id":"logging","dir":"Reference","previous_headings":"","what":"logging","title":"Options for connector — connector-options","text":"Add logs console well whirl log html files Default: FALSE Option: connector.logging Environment: R_CONNECTOR_LOGGING","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/connector-options.html","id":"default-ext","dir":"Reference","previous_headings":"","what":"default_ext","title":"Options for connector — connector-options","text":"Default extension use writing reading files Default: \"csv\" Option: connector.default_ext Environment: R_CONNECTOR_DEFAULT_EXT","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/connector-package.html","id":null,"dir":"Reference","previous_headings":"","what":"connector: Streamlining Data Access in Clinical Research — connector-package","title":"connector: Streamlining Data Access in Clinical Research — connector-package","text":"Provides consistent interface connecting R various data sources including file systems databases. Designed clinical research, 'connector' streamlines access 'ADAM', 'SDTM' example. helps deal multiple data formats standardized API centralized configuration.","code":""},{"path":[]},{"path":"https://novonordisk-opensource.github.io/connector/reference/connector-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"connector: Streamlining Data Access in Clinical Research — connector-package","text":"Maintainer: Cervan Girard cgid@novonordisk.com Authors: Aksel Thomsen oath@novonordisk.com Vladimir Obucina vlob@novonordisk.com contributors: Novo Nordisk /S [copyright holder]","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/connector_dbi.html","id":null,"dir":"Reference","previous_headings":"","what":"Create dbi connector — connector_dbi","title":"Create dbi connector — connector_dbi","text":"Initializes connector DBI type storage. See ConnectorDBI details.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/connector_dbi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create dbi connector — connector_dbi","text":"","code":"connector_dbi(drv, ..., extra_class = NULL)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/connector_dbi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create dbi connector — connector_dbi","text":"drv Driver object inheriting DBI::DBIDriver. ... Additional arguments passed DBI::dbConnect(). extra_class character Extra class assign new connector.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/connector_dbi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create dbi connector — connector_dbi","text":"new ConnectorDBI object","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/connector_dbi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create dbi connector — connector_dbi","text":"extra_class parameter allows create subclass ConnectorDBI object. can useful want create custom connection object easier dispatch new s3 methods, still inheriting methods ConnectorDBI object.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/connector_dbi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create dbi connector — connector_dbi","text":"","code":"# Create DBI connector cnt <- connector_dbi(RSQLite::SQLite(), \":memory:\") cnt #> <ConnectorDBI> #> Inherits from: <Connector> #> Registered methods: #> • `disconnect_cnt.ConnectorDBI()` #> • `list_content_cnt.ConnectorDBI()` #> • `log_read_connector.ConnectorDBI()` #> • `log_remove_connector.ConnectorDBI()` #> • `log_write_connector.ConnectorDBI()` #> • `read_cnt.ConnectorDBI()` #> • `remove_cnt.ConnectorDBI()` #> • `tbl_cnt.ConnectorDBI()` #> • `write_cnt.ConnectorDBI()` #> • `check_resource.Connector()` #> Specifications: #> • conn: <SQLiteConnection>  # Create subclass connection cnt_subclass <- connector_dbi(RSQLite::SQLite(), \":memory:\",   extra_class = \"subclass\" ) cnt_subclass #> <subclass/ConnectorDBI> #> Inherits from: <Connector> #> Registered methods: #> • `disconnect_cnt.ConnectorDBI()` #> • `list_content_cnt.ConnectorDBI()` #> • `log_read_connector.ConnectorDBI()` #> • `log_remove_connector.ConnectorDBI()` #> • `log_write_connector.ConnectorDBI()` #> • `read_cnt.ConnectorDBI()` #> • `remove_cnt.ConnectorDBI()` #> • `tbl_cnt.ConnectorDBI()` #> • `write_cnt.ConnectorDBI()` #> • `check_resource.Connector()` #> Specifications: #> • conn: <SQLiteConnection> class(cnt_subclass) #> [1] \"subclass\"     \"ConnectorDBI\" \"Connector\"    \"R6\""},{"path":"https://novonordisk-opensource.github.io/connector/reference/connector_fs.html","id":null,"dir":"Reference","previous_headings":"","what":"Create fs connector — connector_fs","title":"Create fs connector — connector_fs","text":"Initializes connector file system type storage. See ConnectorFS details.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/connector_fs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create fs connector — connector_fs","text":"","code":"connector_fs(path, extra_class = NULL)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/connector_fs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create fs connector — connector_fs","text":"path character Path file storage. extra_class character Extra class assign new connector.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/connector_fs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create fs connector — connector_fs","text":"new ConnectorFS object","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/connector_fs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create fs connector — connector_fs","text":"extra_class parameter allows create subclass ConnectorFS object. can useful want create custom connection object easier dispatch new s3 methods, still inheriting methods ConnectorFS object.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/connector_fs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create fs connector — connector_fs","text":"","code":"# Create FS connector cnt <- connector_fs(tempdir()) cnt #> <ConnectorFS> #> Inherits from: <Connector> #> Registered methods: #> • `check_resource.ConnectorFS()` #> • `create_directory_cnt.ConnectorFS()` #> • `download_cnt.ConnectorFS()` #> • `download_directory_cnt.ConnectorFS()` #> • `list_content_cnt.ConnectorFS()` #> • `log_read_connector.ConnectorFS()` #> • `log_remove_connector.ConnectorFS()` #> • `log_write_connector.ConnectorFS()` #> • `read_cnt.ConnectorFS()` #> • `remove_cnt.ConnectorFS()` #> • `remove_directory_cnt.ConnectorFS()` #> • `tbl_cnt.ConnectorFS()` #> • `upload_cnt.ConnectorFS()` #> • `upload_directory_cnt.ConnectorFS()` #> • `write_cnt.ConnectorFS()` #> Specifications: #> • path: /tmp/RtmpL7fsh0  # Create subclass connection cnt_subclass <- connector_fs(   path = tempdir(),   extra_class = \"subclass\" ) cnt_subclass #> <subclass/ConnectorFS> #> Inherits from: <Connector> #> Registered methods: #> • `check_resource.ConnectorFS()` #> • `create_directory_cnt.ConnectorFS()` #> • `download_cnt.ConnectorFS()` #> • `download_directory_cnt.ConnectorFS()` #> • `list_content_cnt.ConnectorFS()` #> • `log_read_connector.ConnectorFS()` #> • `log_remove_connector.ConnectorFS()` #> • `log_write_connector.ConnectorFS()` #> • `read_cnt.ConnectorFS()` #> • `remove_cnt.ConnectorFS()` #> • `remove_directory_cnt.ConnectorFS()` #> • `tbl_cnt.ConnectorFS()` #> • `upload_cnt.ConnectorFS()` #> • `upload_directory_cnt.ConnectorFS()` #> • `write_cnt.ConnectorFS()` #> Specifications: #> • path: /tmp/RtmpL7fsh0 class(cnt_subclass) #> [1] \"subclass\"    \"ConnectorFS\" \"Connector\"   \"R6\""},{"path":"https://novonordisk-opensource.github.io/connector/reference/connectors.html","id":null,"dir":"Reference","previous_headings":"","what":"Collection of connector objects — connectors","title":"Collection of connector objects — connectors","text":"Holds special list individual connector objects consistent use connections project.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/connectors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collection of connector objects — connectors","text":"","code":"connectors(...)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/connectors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collection of connector objects — connectors","text":"... Named individual Connector objects","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/connectors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collection of connector objects — connectors","text":"","code":"# Create connectors objects  con <- connectors(   sdtm = connector_fs(path = tempdir()),   adam = connector_dbi(drv = RSQLite::SQLite()) )  # Print for overview  con #> <connectors> #>   $sdtm <ConnectorFS> #>   $adam <ConnectorDBI>  # Print the individual connector for more information  con$sdtm #> <ConnectorFS> #> Inherits from: <Connector> #> Registered methods: #> • `check_resource.ConnectorFS()` #> • `create_directory_cnt.ConnectorFS()` #> • `download_cnt.ConnectorFS()` #> • `download_directory_cnt.ConnectorFS()` #> • `list_content_cnt.ConnectorFS()` #> • `log_read_connector.ConnectorFS()` #> • `log_remove_connector.ConnectorFS()` #> • `log_write_connector.ConnectorFS()` #> • `read_cnt.ConnectorFS()` #> • `remove_cnt.ConnectorFS()` #> • `remove_directory_cnt.ConnectorFS()` #> • `tbl_cnt.ConnectorFS()` #> • `upload_cnt.ConnectorFS()` #> • `upload_directory_cnt.ConnectorFS()` #> • `write_cnt.ConnectorFS()` #> Specifications: #> • path: /tmp/RtmpL7fsh0  con$adam #> <ConnectorDBI> #> Inherits from: <Connector> #> Registered methods: #> • `disconnect_cnt.ConnectorDBI()` #> • `list_content_cnt.ConnectorDBI()` #> • `log_read_connector.ConnectorDBI()` #> • `log_remove_connector.ConnectorDBI()` #> • `log_write_connector.ConnectorDBI()` #> • `read_cnt.ConnectorDBI()` #> • `remove_cnt.ConnectorDBI()` #> • `tbl_cnt.ConnectorDBI()` #> • `write_cnt.ConnectorDBI()` #> • `check_resource.Connector()` #> Specifications: #> • conn: <SQLiteConnection>"},{"path":"https://novonordisk-opensource.github.io/connector/reference/create_directory_cnt.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a directory — create_directory_cnt","title":"Create a directory — create_directory_cnt","text":"Generic implementing create directory connector. Mostly relevant file storage connectors. ConnectorFS: Uses fs::dir_create() create directory path connector.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/create_directory_cnt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a directory — create_directory_cnt","text":"","code":"create_directory_cnt(connector_object, name, open = TRUE, ...)  # S3 method for class 'ConnectorFS' create_directory_cnt(connector_object, name, open = TRUE, ...)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/create_directory_cnt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a directory — create_directory_cnt","text":"connector_object Connector connector object use. name character name directory create open logical Open directory new connector object. ... Additional arguments passed method individual connector.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/create_directory_cnt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a directory — create_directory_cnt","text":"invisible connector_object.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/create_directory_cnt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a directory — create_directory_cnt","text":"","code":"# Create a directory in a file storage  folder <- withr::local_tempdir() cnt <- connector_fs(folder) #> Error in validate_resource(self): Invalid file system connector: /tmp/RtmpL7fsh0/file1e9624213369 does not #> exist.  cnt |>   list_content_cnt(pattern = \"new_folder\") #> Error: object 'cnt' not found  cnt |>   create_directory_cnt(\"new_folder\") #> Error: object 'cnt' not found  # This will return new connector object of a newly created folder new_connector <- cnt |>   list_content_cnt(pattern = \"new_folder\") #> Error: object 'cnt' not found  cnt |>   remove_directory_cnt(\"new_folder\") #> Error: object 'cnt' not found"},{"path":"https://novonordisk-opensource.github.io/connector/reference/datasources.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract data sources from connectors — datasources","title":"Extract data sources from connectors — datasources","text":"function extracts \"datasources\" attribute connectors object.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/datasources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract data sources from connectors — datasources","text":"","code":"datasources(connectors)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/datasources.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract data sources from connectors — datasources","text":"connectors object containing connectors \"datasources\" attribute.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/datasources.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract data sources from connectors — datasources","text":"object containing data sources extracted \"datasources\" attribute.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/datasources.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract data sources from connectors — datasources","text":"function uses attr() function access \"datasources\" attribute connectors object. directly returns attribute without modification.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/datasources.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract data sources from connectors — datasources","text":"","code":"# Assume we have a 'mock_connectors' object with a 'datasources' attribute mock_connectors <- structure(list(), class = \"connectors\") attr(mock_connectors, \"datasources\") <- list(source1 = \"data1\", source2 = \"data2\")  # Using the function result <- datasources(mock_connectors) print(result) #> $source1 #> [1] \"data1\" #>  #> $source2 #> [1] \"data2\" #>"},{"path":"https://novonordisk-opensource.github.io/connector/reference/disconnect_cnt.html","id":null,"dir":"Reference","previous_headings":"","what":"Disconnect (close) the connection of the connector — disconnect_cnt","title":"Disconnect (close) the connection of the connector — disconnect_cnt","text":"Generic implementing disconnect relevant connections. Mostly relevant DBI connectors. ConnectorDBI: Uses DBI::dbDisconnect() create table reference close DBI connection.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/disconnect_cnt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Disconnect (close) the connection of the connector — disconnect_cnt","text":"","code":"disconnect_cnt(connector_object, ...)  # S3 method for class 'ConnectorDBI' disconnect_cnt(connector_object, ...)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/disconnect_cnt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Disconnect (close) the connection of the connector — disconnect_cnt","text":"connector_object Connector connector object use. ... Additional arguments passed method individual connector.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/disconnect_cnt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Disconnect (close) the connection of the connector — disconnect_cnt","text":"invisible connector_object.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/disconnect_cnt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Disconnect (close) the connection of the connector — disconnect_cnt","text":"","code":"# Open and close a DBI connector cnt <- connector_dbi(RSQLite::SQLite())  cnt$conn #> <SQLiteConnection> #>   Path:  #>   Extensions: TRUE  cnt |>   disconnect_cnt()  cnt$conn #> <SQLiteConnection> #>   DISCONNECTED"},{"path":"https://novonordisk-opensource.github.io/connector/reference/download_cnt.html","id":null,"dir":"Reference","previous_headings":"","what":"Download content from the connector — download_cnt","title":"Download content from the connector — download_cnt","text":"Generic implementing download files connector: ConnectorFS: Uses fs::file_copy() copy file file storage desired file. ConnectorLogger: Logs download operation calls underlying connector method.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/download_cnt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download content from the connector — download_cnt","text":"","code":"download_cnt(connector_object, src, dest = basename(src), ...)  # S3 method for class 'ConnectorFS' download_cnt(connector_object, src, dest = basename(src), ...)  # S3 method for class 'ConnectorLogger' download_cnt(connector_object, src, dest = basename(src), ...)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/download_cnt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download content from the connector — download_cnt","text":"connector_object Connector connector object use. src character Name content read, write, remove. Typically table name. dest character Path file download upload ... Additional arguments passed method individual connector.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/download_cnt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download content from the connector — download_cnt","text":"invisible connector_object.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/download_cnt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download content from the connector — download_cnt","text":"","code":"# Download file from a file storage  folder <- withr::local_tempdir() cnt <- connector_fs(folder) #> Error in validate_resource(self): Invalid file system connector: /tmp/RtmpL7fsh0/file1e9674346240 does not #> exist.  cnt |>   write_cnt(\"this is an example\", \"example.txt\") #> Error: object 'cnt' not found  list.files(pattern = \"example.txt\") #> character(0)  cnt |>   download_cnt(\"example.txt\") #> Error: object 'cnt' not found  list.files(pattern = \"example.txt\") #> character(0) readLines(\"example.txt\") #> Warning: cannot open file 'example.txt': No such file or directory #> Error in file(con, \"r\"): cannot open the connection  cnt |>   remove_cnt(\"example.txt\") #> Error: object 'cnt' not found  # Add logging to a file system connector for downloads folder <- withr::local_tempdir() cnt <- connectors(data = connector_fs(folder)) |> add_logs() #> Error in validate_resource(self): Invalid file system connector: /tmp/RtmpL7fsh0/file1e963d5d54ef does not #> exist.  cnt$data |>   write_cnt(iris, \"iris.csv\") #> Error: object 'cnt' not found  cnt$data |>   download_cnt(\"iris.csv\", tempfile(fileext = \".csv\")) #> Error: object 'cnt' not found"},{"path":"https://novonordisk-opensource.github.io/connector/reference/download_directory_cnt.html","id":null,"dir":"Reference","previous_headings":"","what":"Download a directory — download_directory_cnt","title":"Download a directory — download_directory_cnt","text":"Generic implementing download directory connector. Mostly relevant file storage connectors. ConnectorFS: Uses fs::dir_copy().","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/download_directory_cnt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download a directory — download_directory_cnt","text":"","code":"download_directory_cnt(connector_object, src, dest = basename(src), ...)  # S3 method for class 'ConnectorFS' download_directory_cnt(connector_object, src, dest = basename(src), ...)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/download_directory_cnt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download a directory — download_directory_cnt","text":"connector_object Connector connector object use. src character name directory download connector dest character Path directory download ... Additional arguments passed method individual connector.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/download_directory_cnt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download a directory — download_directory_cnt","text":"invisible connector_object.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/extract_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract metadata from connectors — extract_metadata","title":"Extract metadata from connectors — extract_metadata","text":"function extracts \"metadata\" attribute connectors object, optional filtering return specific metadata field.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/extract_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract metadata from connectors — extract_metadata","text":"","code":"extract_metadata(connectors, name = NULL)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/extract_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract metadata from connectors — extract_metadata","text":"connectors object containing connectors \"metadata\" attribute. name character string specifying metadata attribute extract. NULL (default), returns metadata.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/extract_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract metadata from connectors — extract_metadata","text":"list containing metadata extracted \"metadata\" attribute, specific attribute value name specified.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/extract_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract metadata from connectors — extract_metadata","text":"","code":"# Assume we have a 'mock_connectors' object with a 'metadata' attribute mock_connectors <- structure(list(), class = \"connectors\") attr(mock_connectors, \"metadata\") <- list(study = \"demo\", version = \"1.0\")  # Extract all metadata result <- extract_metadata(mock_connectors) print(result) #> $study #> [1] \"demo\" #>  #> $version #> [1] \"1.0\" #>   # Extract specific metadata field study_name <- extract_metadata(mock_connectors, name = \"study\") print(study_name) #> [1] \"demo\""},{"path":"https://novonordisk-opensource.github.io/connector/reference/list_content_cnt.html","id":null,"dir":"Reference","previous_headings":"","what":"List available content from the connector — list_content_cnt","title":"List available content from the connector — list_content_cnt","text":"Generic implementing list content available different connectors: ConnectorDBI: Uses DBI::dbListTables() list tables DBI connection. ConnectorFS: Uses list.files() list files path connector. ConnectorLogger: Logs list operation calls underlying connector method.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/list_content_cnt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List available content from the connector — list_content_cnt","text":"","code":"list_content_cnt(connector_object, ...)  # S3 method for class 'ConnectorDBI' list_content_cnt(connector_object, ...)  # S3 method for class 'ConnectorFS' list_content_cnt(connector_object, ...)  # S3 method for class 'ConnectorLogger' list_content_cnt(connector_object, ...)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/list_content_cnt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List available content from the connector — list_content_cnt","text":"connector_object Connector connector object use. ... Additional arguments passed method individual connector.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/list_content_cnt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List available content from the connector — list_content_cnt","text":"character vector content names","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/list_content_cnt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List available content from the connector — list_content_cnt","text":"","code":"# List tables in a DBI database cnt <- connector_dbi(RSQLite::SQLite())  cnt |>   list_content_cnt() #> character(0)  # List content in a file storage cnt <- connector_fs(tempdir())  cnt |>   list_content_cnt() #>  [1] \"bslib-2ce9eb5d8d7866b4f2d82a9ef19eb08f\"                                                              #>  [2] \"downlit\"                                                                                             #>  [3] \"file1e9610b2bd90\"                                                                                    #>  [4] \"file1e961249ed48\"                                                                                    #>  [5] \"file1e961e4f377c\"                                                                                    #>  [6] \"file1e9620b276d3\"                                                                                    #>  [7] \"file1e96331a83f7\"                                                                                    #>  [8] \"file1e963a5071a.yml\"                                                                                 #>  [9] \"file1e963b8ce585\"                                                                                    #> [10] \"file1e963b9baf77\"                                                                                    #> [11] \"file1e963e0240b1\"                                                                                    #> [12] \"file1e9643f13591\"                                                                                    #> [13] \"file1e965d42823d\"                                                                                    #> [14] \"file1e967187ea37\"                                                                                    #> [15] \"file1e96742b8750\"                                                                                    #> [16] \"file1e96782d3cb2\"                                                                                    #> [17] \"file1e967b76a6ac\"                                                                                    #> [18] \"file1e967eb40570.yml\"                                                                                #> [19] \"repos_https%3A%2F%2Fpackagemanager.posit.co%2Fcran%2F__linux__%2Fnoble%2Flatest%2Fsrc%2Fcontrib.rds\"  # Only list CSV files using the pattern argument of list.files  cnt |>   list_content_cnt(pattern = \"\\\\.csv$\") #> character(0)  # Add logging to a connector and list contents folder <- withr::local_tempdir() cnt <- connectors(data = connector_fs(folder)) |> add_logs() #> Error in validate_resource(self): Invalid file system connector: /tmp/RtmpL7fsh0/file1e9619f6a683 does not #> exist.  cnt$data |>   write_cnt(iris, \"iris.csv\") #> Error in method_error_msg(connector_object): Method not implemented for class <NULL> #> ℹ See the customize (`vignette(connector::customize)`) vignette on how to #>   create custom connectors and methods  cnt$data |>   list_content_cnt() #> Error in method_error_msg(connector_object): Method not implemented for class <NULL> #> ℹ See the customize (`vignette(connector::customize)`) vignette on how to #>   create custom connectors and methods"},{"path":"https://novonordisk-opensource.github.io/connector/reference/log-functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Connector Logging Functions — log-functions","title":"Connector Logging Functions — log-functions","text":"comprehensive set generic functions methods logging connector operations. functions provide automatic logging capabilities read, write, remove, list operations across different connector types, enabling transparent audit trails operation tracking.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/log-functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connector Logging Functions — log-functions","text":"","code":"log_read_connector(connector_object, name, ...)  # Default S3 method log_read_connector(connector_object, name, ...)  log_write_connector(connector_object, name, ...)  # Default S3 method log_write_connector(connector_object, name, ...)  log_remove_connector(connector_object, name, ...)  # Default S3 method log_remove_connector(connector_object, name, ...)  log_list_content_connector(connector_object, ...)  # S3 method for class 'ConnectorDBI' log_read_connector(connector_object, name, ...)  # S3 method for class 'ConnectorDBI' log_write_connector(connector_object, name, ...)  # S3 method for class 'ConnectorDBI' log_remove_connector(connector_object, name, ...)  # S3 method for class 'ConnectorFS' log_read_connector(connector_object, name, ...)  # S3 method for class 'ConnectorFS' log_write_connector(connector_object, name, ...)  # S3 method for class 'ConnectorFS' log_remove_connector(connector_object, name, ...)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/log-functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connector Logging Functions — log-functions","text":"connector_object connector object log operations . Can connector class (ConnectorFS, ConnectorDBI, ConnectorLogger, etc.) name Character string specifying name identifier resource operated (e.g., file name, table name) ... Additional parameters passed specific method implementations. May include connector-specific options metadata.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/log-functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connector Logging Functions — log-functions","text":"primarily side-effect functions perform logging. actual return value depends specific method implementation, typically: log_read_connector: Result read operation log_write_connector: Invisible result write operation log_remove_connector: Invisible result remove operation log_list_content_connector: List connector contents","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/log-functions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Connector Logging Functions — log-functions","text":"Connector Logging Functions logging system built around S3 generic functions dispatch specific implementations based connector class. operation logged contextual information including connector details, operation type, resource names.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/log-functions.html","id":"available-operations","dir":"Reference","previous_headings":"","what":"Available Operations","title":"Connector Logging Functions — log-functions","text":"log_read_connector(connector_object, name, ...) Logs read operations data retrieved connector. Automatically called read_cnt() tbl_cnt() methods. log_write_connector(connector_object, name, ...) Logs write operations data stored connector. Automatically called write_cnt() upload_cnt() methods. log_remove_connector(connector_object, name, ...) Logs removal operations resources deleted connector. Automatically called remove_cnt() methods. log_list_content_connector(connector_object, ...) Logs listing operations connector contents queried. Automatically called list_content_cnt() methods.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/log-functions.html","id":"supported-connector-types","dir":"Reference","previous_headings":"","what":"Supported Connector Types","title":"Connector Logging Functions — log-functions","text":"connector type specialized logging implementations: ConnectorFS File system connectors log full file path operation type. Example log: \"dataset.csv @ /path//data\" ConnectorDBI Database connectors log driver information database name. Example log: \"table_name @ driver: SQLiteDriver, dbname: mydb.sqlite\"","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/log-functions.html","id":"integration-with-whirl-package","dir":"Reference","previous_headings":"","what":"Integration with whirl Package","title":"Connector Logging Functions — log-functions","text":"logging operations use whirl package consistent log output: whirl::log_read() - read operations whirl::log_write() - write operations whirl::log_delete() - remove operations","code":""},{"path":[]},{"path":"https://novonordisk-opensource.github.io/connector/reference/log-functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connector Logging Functions — log-functions","text":"","code":"# Basic usage with file system connector logged_fs <- add_logs(connectors(data = connector_fs(path = tempdir())))  # Write operation (automatically logged) write_cnt(logged_fs$data, mtcars, \"cars.csv\") #> {\"time\":\"2025-08-12 06:28:00\",\"type\":\"write\",\"file\":\"cars.csv @ /tmp/RtmpL7fsh0\"} # Output: \"cars.csv @ /tmp/RtmpXXX\"  #' # Read operation (automatically logged) data <- read_cnt(logged_fs$data, \"cars.csv\") #> → Found one file: /tmp/RtmpL7fsh0/cars.csv #> Rows: 32 Columns: 11 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> dbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> {\"time\":\"2025-08-12 06:28:00\",\"type\":\"read\",\"file\":\"cars.csv @ /tmp/RtmpL7fsh0\"} # Output: \"dataset.csv @ /tmp/RtmpXXX\"  # Database connector example logged_db <- add_logs(connectors(db = connector_dbi(RSQLite::SQLite(), \":memory:\")))  # Operations are logged with database context write_cnt(logged_db$db, iris, \"iris_table\") #> {\"time\":\"2025-08-12 06:28:00\",\"type\":\"write\",\"file\":\"iris_table @ driver: SQLiteConnection, dbname: :memory:\"} # Output: \"iris_table @ driver: SQLiteDriver, dbname: :memory:\""},{"path":"https://novonordisk-opensource.github.io/connector/reference/nested_connectors.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a nested connectors object — nested_connectors","title":"Create a nested connectors object — nested_connectors","text":"function creates nested connectors object provided arguments.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/nested_connectors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a nested connectors object — nested_connectors","text":"","code":"nested_connectors(...)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/nested_connectors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a nested connectors object — nested_connectors","text":"... number connectors object.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/nested_connectors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a nested connectors object — nested_connectors","text":"list class \"nested_connectors\" containing provided arguments.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/read_cnt.html","id":null,"dir":"Reference","previous_headings":"","what":"Read content from the connector — read_cnt","title":"Read content from the connector — read_cnt","text":"Generic implementing read content different connector objects: ConnectorDBI: Uses DBI::dbReadTable() read table DBI connection. ConnectorFS: Uses read_file() read given file. underlying function used, thereby also arguments available ... depends file extension. ConnectorLogger: Logs read operation calls underlying connector method.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/read_cnt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read content from the connector — read_cnt","text":"","code":"read_cnt(connector_object, name, ...)  # S3 method for class 'ConnectorDBI' read_cnt(connector_object, name, ...)  # S3 method for class 'ConnectorFS' read_cnt(connector_object, name, ...)  # S3 method for class 'ConnectorLogger' read_cnt(connector_object, name, ...)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/read_cnt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read content from the connector — read_cnt","text":"connector_object Connector connector object use. name character Name content read, write, remove. Typically table name. ... Additional arguments passed method individual connector.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/read_cnt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read content from the connector — read_cnt","text":"R object content. rectangular data data.frame.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/read_cnt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read content from the connector — read_cnt","text":"","code":"# Read table from DBI database cnt <- connector_dbi(RSQLite::SQLite())  cnt |>   write_cnt(iris, \"iris\")  cnt |>   list_content_cnt() #> [1] \"iris\"  cnt |>   read_cnt(\"iris\") |>   head() #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6          5.4         3.9          1.7         0.4  setosa  # Write and read a CSV file using the file storage connector  folder <- withr::local_tempdir() cnt <- connector_fs(folder) #> Error in validate_resource(self): Invalid file system connector: /tmp/RtmpL7fsh0/file1e963f605edb does not #> exist.  cnt |>   write_cnt(iris, \"iris.csv\")  cnt |>   read_cnt(\"iris.csv\") |>   head() #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6          5.4         3.9          1.7         0.4  setosa  # Add logging to a file system connector folder <- withr::local_tempdir() cnt <- connectors(data = connector_fs(folder)) |> add_logs() #> Error in validate_resource(self): Invalid file system connector: /tmp/RtmpL7fsh0/file1e96739b331d does not #> exist.  cnt$data |>   write_cnt(iris, \"iris.csv\") #> Error in method_error_msg(connector_object): Method not implemented for class <NULL> #> ℹ See the customize (`vignette(connector::customize)`) vignette on how to #>   create custom connectors and methods  cnt$data |>   read_cnt(\"iris.csv\") |>   head() #> Error in method_error_msg(connector_object): Method not implemented for class <NULL> #> ℹ See the customize (`vignette(connector::customize)`) vignette on how to #>   create custom connectors and methods"},{"path":"https://novonordisk-opensource.github.io/connector/reference/read_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read files based on the extension — read_file","title":"Read files based on the extension — read_file","text":"read_file() backbone read_cnt methods, files read source. function wrapper around read_ext(), controls dispatch based file extension. read_ext() controls packages functions used read individual file extensions. list pre-defined methods: default: extensions listed attempted read vroom::vroom() txt: readr::read_lines() csv: readr::read_csv() parquet: arrow::read_parquet() rds: readr::read_rds() sas7bdat: haven::read_sas() xpt: haven::read_xpt() yml/yaml: yaml::read_yaml() json: jsonlite::read_json() excel: readxl::read_excel()","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/read_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read files based on the extension — read_file","text":"","code":"read_file(path, ...)  read_ext(path, ...)  # Default S3 method read_ext(path, ...)  # S3 method for class 'txt' read_ext(path, ...)  # S3 method for class 'csv' read_ext(path, delim = \",\", ...)  # S3 method for class 'parquet' read_ext(path, ...)  # S3 method for class 'rds' read_ext(path, ...)  # S3 method for class 'sas7bdat' read_ext(path, ...)  # S3 method for class 'xpt' read_ext(path, ...)  # S3 method for class 'yml' read_ext(path, ...)  # S3 method for class 'json' read_ext(path, ...)  # S3 method for class 'xlsx' read_ext(path, ...)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/read_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read files based on the extension — read_file","text":"path character() Path file. ... parameters passed functions behind methods file extension. delim Single character used separate fields within record.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/read_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read files based on the extension — read_file","text":"result reading function","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/read_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read files based on the extension — read_file","text":"","code":"# Read CSV file temp_csv <- tempfile(\"iris\", fileext = \".csv\") write.csv(iris, temp_csv, row.names = FALSE) read_file(temp_csv) #> Rows: 150 Columns: 5 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): Species #> dbl (4): Sepal.Length, Sepal.Width, Petal.Length, Petal.Width #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 150 × 5 #>    Sepal.Length Sepal.Width Petal.Length Petal.Width Species #>           <dbl>       <dbl>        <dbl>       <dbl> <chr>   #>  1          5.1         3.5          1.4         0.2 setosa  #>  2          4.9         3            1.4         0.2 setosa  #>  3          4.7         3.2          1.3         0.2 setosa  #>  4          4.6         3.1          1.5         0.2 setosa  #>  5          5           3.6          1.4         0.2 setosa  #>  6          5.4         3.9          1.7         0.4 setosa  #>  7          4.6         3.4          1.4         0.3 setosa  #>  8          5           3.4          1.5         0.2 setosa  #>  9          4.4         2.9          1.4         0.2 setosa  #> 10          4.9         3.1          1.5         0.1 setosa  #> # ℹ 140 more rows"},{"path":"https://novonordisk-opensource.github.io/connector/reference/remove_cnt.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove content from the connector — remove_cnt","title":"Remove content from the connector — remove_cnt","text":"Generic implementing remove content different connectors: ConnectorDBI: Uses DBI::dbRemoveTable() remove table DBI connection. ConnectorFS: Uses fs::file_delete() delete file. ConnectorLogger: Logs remove operation calls underlying connector method.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/remove_cnt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove content from the connector — remove_cnt","text":"","code":"remove_cnt(connector_object, name, ...)  # S3 method for class 'ConnectorDBI' remove_cnt(connector_object, name, ...)  # S3 method for class 'ConnectorFS' remove_cnt(connector_object, name, ...)  # S3 method for class 'ConnectorLogger' remove_cnt(connector_object, name, ...)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/remove_cnt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove content from the connector — remove_cnt","text":"connector_object Connector connector object use. name character Name content read, write, remove. Typically table name. ... Additional arguments passed method individual connector.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/remove_cnt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove content from the connector — remove_cnt","text":"invisible connector_object.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/remove_cnt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove content from the connector — remove_cnt","text":"","code":"# Remove table in a DBI database cnt <- connector_dbi(RSQLite::SQLite())  cnt |>   write_cnt(iris, \"iris\") |>   list_content_cnt() #> [1] \"iris\"  cnt |>   remove_cnt(\"iris\") |>   list_content_cnt() #> character(0)  # Remove a file from the file storage  folder <- withr::local_tempdir() cnt <- connector_fs(folder) #> Error in validate_resource(self): Invalid file system connector: /tmp/RtmpL7fsh0/file1e96291fcdc6 does not #> exist.  cnt |>   write_cnt(\"this is an example\", \"example.txt\") #> Warning: cannot open file 'this is an example': No such file or directory #> Error in file(file, \"rt\"): cannot open the connection cnt |>   list_content_cnt(pattern = \"example.txt\") #> character(0)  cnt |>   read_cnt(\"example.txt\") #> Error: no such table: example.txt  cnt |>   remove_cnt(\"example.txt\") #> Error: no such table: example.txt  cnt |>   list_content_cnt(pattern = \"example.txt\") #> character(0)  # Add logging to a connector and remove content folder <- withr::local_tempdir() cnt <- connectors(data = connector_fs(folder)) |> add_logs() #> Error in validate_resource(self): Invalid file system connector: /tmp/RtmpL7fsh0/file1e961484f06c does not #> exist.  cnt$data |>   write_cnt(iris, \"iris.csv\") #> Error in method_error_msg(connector_object): Method not implemented for class <NULL> #> ℹ See the customize (`vignette(connector::customize)`) vignette on how to #>   create custom connectors and methods  cnt$data |>   remove_cnt(\"iris.csv\") #> Error in method_error_msg(connector_object): Method not implemented for class <NULL> #> ℹ See the customize (`vignette(connector::customize)`) vignette on how to #>   create custom connectors and methods"},{"path":"https://novonordisk-opensource.github.io/connector/reference/remove_datasource.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a datasource from a YAML configuration file — remove_datasource","title":"Remove a datasource from a YAML configuration file — remove_datasource","text":"function removes datasource YAML configuration file based provided name, ensuring interfere existing datasources.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/remove_datasource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a datasource from a YAML configuration file — remove_datasource","text":"","code":"remove_datasource(config_path, name)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/remove_datasource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a datasource from a YAML configuration file — remove_datasource","text":"config_path file path YAML configuration file name name datasource removed","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/remove_datasource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove a datasource from a YAML configuration file — remove_datasource","text":"(invisible) config_path configuration updated","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/remove_datasource.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove a datasource from a YAML configuration file — remove_datasource","text":"","code":"config <- tempfile(fileext = \".yml\")  file.copy(   from = system.file(\"config\", \"_connector.yml\", package = \"connector\"),   to = config ) #> [1] TRUE  config |>   add_datasource(     name = \"new_datasource\",     backend = list(type = \"connector_fs\", path = \"new_path\")   ) |>   remove_datasource(\"new_datasource\")"},{"path":"https://novonordisk-opensource.github.io/connector/reference/remove_directory_cnt.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a directory — remove_directory_cnt","title":"Remove a directory — remove_directory_cnt","text":"Generic implementing remove directory connector. Mostly relevant file storage connectors. ConnectorFS: Uses fs::dir_delete() remove directory path connector.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/remove_directory_cnt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a directory — remove_directory_cnt","text":"","code":"remove_directory_cnt(connector_object, name, ...)  # S3 method for class 'ConnectorFS' remove_directory_cnt(connector_object, name, ...)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/remove_directory_cnt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a directory — remove_directory_cnt","text":"connector_object Connector connector object use. name character name directory remove ... Additional arguments passed method individual connector.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/remove_directory_cnt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove a directory — remove_directory_cnt","text":"invisible connector_object.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/remove_directory_cnt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove a directory — remove_directory_cnt","text":"","code":"# Remove a directory from a file storage  folder <- withr::local_tempdir() cnt <- connector_fs(folder) #> Error in validate_resource(self): Invalid file system connector: /tmp/RtmpL7fsh0/file1e96296884ce does not #> exist.  cnt |>   create_directory_cnt(\"new_folder\") #> Error: object 'cnt' not found  cnt |>   list_content_cnt(pattern = \"new_folder\") #> Error: object 'cnt' not found  cnt |>   remove_directory_cnt(\"new_folder\") |>   list_content_cnt(pattern = \"new_folder\") #> Error: object 'cnt' not found"},{"path":"https://novonordisk-opensource.github.io/connector/reference/remove_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove metadata from a YAML configuration file — remove_metadata","title":"Remove metadata from a YAML configuration file — remove_metadata","text":"function removes metadata YAML configuration file deleting specified key metadata section file.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/remove_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove metadata from a YAML configuration file — remove_metadata","text":"","code":"remove_metadata(config_path, key)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/remove_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove metadata from a YAML configuration file — remove_metadata","text":"config_path file path YAML configuration file key key metadata entry removed","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/remove_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove metadata from a YAML configuration file — remove_metadata","text":"(invisible) config_path configuration updated","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/remove_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove metadata from a YAML configuration file — remove_metadata","text":"","code":"config <- tempfile(fileext = \".yml\")  file.copy(   from = system.file(\"config\", \"_connector.yml\", package = \"connector\"),   to = config ) #> [1] TRUE  config |>   add_metadata(     key = \"new_metadata\",     value = \"new_value\"   ) |>   remove_metadata(\"new_metadata\")"},{"path":"https://novonordisk-opensource.github.io/connector/reference/resource-validation.html","id":null,"dir":"Reference","previous_headings":"","what":"Resource Validation System for Connector Objects — resource-validation","title":"Resource Validation System for Connector Objects — resource-validation","text":"module provides flexible validation system verify resources required connector objects exist accessible. validation performed S3 method dispatch, allowing connector class define validation logic providing consistent interface.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/resource-validation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resource Validation System for Connector Objects — resource-validation","text":"","code":"validate_resource(x)  check_resource(self)  # S3 method for class 'Connector' check_resource(self)  # S3 method for class 'ConnectorFS' check_resource(self)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/resource-validation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resource Validation System for Connector Objects — resource-validation","text":"x Connector object validate. self Connector object method dispatch.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/resource-validation.html","id":"architecture","dir":"Reference","previous_headings":"","what":"Architecture","title":"Resource Validation System for Connector Objects — resource-validation","text":"system built around two main components: validate_resource(): dispatcher function finds executes appropriate S3 method based connector's class check_resource(): generic S3 method defines validation interface connector types","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/resource-validation.html","id":"method-resolution","dir":"Reference","previous_headings":"","what":"Method Resolution","title":"Resource Validation System for Connector Objects — resource-validation","text":"validation process follows hierarchy: Attempt find class-specific method (e.g., check_resource.ConnectorFS) specific method exists, fall back default check_resource.Connector Execute resolved method appropriate error handling","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/resource-validation.html","id":"available-s-methods","dir":"Reference","previous_headings":"","what":"Available S3 Methods","title":"Resource Validation System for Connector Objects — resource-validation","text":"check_resource.Connector Default method performs validation. Serves safe fallback connector classes without specific validation needs. check_resource.ConnectorFS Validates file system resources checking directory existence using fs::dir_exists(). Throws informative errors missing directories.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/resource-validation.html","id":"implementation-guidelines","dir":"Reference","previous_headings":"","what":"Implementation Guidelines","title":"Resource Validation System for Connector Objects — resource-validation","text":"implementing new connector classes resource validation: Define method following pattern check_resource.<YourClass> Return NULL successful validation Use cli::cli_abort() validation failures provide consistent error formatting Include call = rlang::caller_env() error calls proper error context","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/resource-validation.html","id":"error-handling","dir":"Reference","previous_headings":"","what":"Error Handling","title":"Resource Validation System for Connector Objects — resource-validation","text":"validation system provides robust error handling: Method resolution failures handled gracefully fallback default Validation errors include contextual information failing resource Error messages use cli formatting consistency across package","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/resource-validation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resource Validation System for Connector Objects — resource-validation","text":"","code":"# Basic validation for a file system connector  fs_connector <- try(ConnectorFS$new(path = \"doesn_t_exists\"), silent = TRUE) fs_connector #> [1] \"Error in validate_resource(self) : \\n  \\033[1m\\033[22mInvalid file system connector: \\033[34mdoesn_t_exists\\033[39m does not exist.\\n\" #> attr(,\"class\") #> [1] \"try-error\" #> attr(,\"condition\") #> <error/rlang_error> #> Error in `validate_resource()`: #> ! Invalid file system connector: doesn_t_exists does not exist. #> --- #> Backtrace: #>      ▆ #>   1. └─pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE) #>   2.   └─pkgdown::build_site(...) #>   3.     └─pkgdown:::build_site_local(...) #>   4.       └─pkgdown::build_reference(...) #>   5.         ├─pkgdown:::unwrap_purrr_error(...) #>   6.         │ └─base::withCallingHandlers(...) #>   7.         └─purrr::map(...) #>   8.           └─purrr:::map_(\"list\", .x, .f, ..., .progress = .progress) #>   9.             ├─purrr:::with_indexed_errors(...) #>  10.             │ └─base::withCallingHandlers(...) #>  11.             ├─purrr:::call_with_cleanup(...) #>  12.             └─pkgdown (local) .f(.x[[i]], ...) #>  13.               ├─base::withCallingHandlers(...) #>  14.               └─pkgdown:::data_reference_topic(...) #>  15.                 └─pkgdown:::run_examples(...) #>  16.                   └─pkgdown:::highlight_examples(code, topic, env = env) #>  17.                     └─downlit::evaluate_and_highlight(...) #>  18.                       └─evaluate::evaluate(code, child_env(env), new_device = TRUE, output_handler = output_handler) #>  19.                         ├─base::withRestarts(...) #>  20.                         │ └─base (local) withRestartList(expr, restarts) #>  21.                         │   ├─base (local) withOneRestart(withRestartList(expr, restarts[-nr]), restarts[[nr]]) #>  22.                         │   │ └─base (local) doWithOneRestart(return(expr), restart) #>  23.                         │   └─base (local) withRestartList(expr, restarts[-nr]) #>  24.                         │     └─base (local) withOneRestart(expr, restarts[[1L]]) #>  25.                         │       └─base (local) doWithOneRestart(return(expr), restart) #>  26.                         ├─evaluate:::with_handlers(...) #>  27.                         │ ├─base::eval(call) #>  28.                         │ │ └─base::eval(call) #>  29.                         │ └─base::withCallingHandlers(...) #>  30.                         ├─base::withVisible(eval(expr, envir)) #>  31.                         └─base::eval(expr, envir) #>  32.                           └─base::eval(expr, envir) #>  33.                             ├─base::try(ConnectorFS$new(path = \"doesn_t_exists\"), silent = TRUE) #>  34.                             │ └─base::tryCatch(...) #>  35.                             │   └─base (local) tryCatchList(expr, classes, parentenv, handlers) #>  36.                             │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]]) #>  37.                             │       └─base (local) doTryCatch(return(expr), name, parentenv, handler) #>  38.                             └─ConnectorFS$new(path = \"doesn_t_exists\") #>  39.                               └─connector (local) initialize(...) #>  40.                                 └─super$initialize(extra_class = extra_class) #>  41.                                   └─connector::validate_resource(self)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/tbl_cnt.html","id":null,"dir":"Reference","previous_headings":"","what":"Use dplyr verbs to interact with the remote database table — tbl_cnt","title":"Use dplyr verbs to interact with the remote database table — tbl_cnt","text":"Generic implementing create dplyr::tbl() connection order use dplyr verbs interact remote database table. Mostly relevant DBI connectors. ConnectorDBI: Uses dplyr::tbl() create table reference table DBI connection. ConnectorFS: Uses read_cnt() allow redundancy fs dbi.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/tbl_cnt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use dplyr verbs to interact with the remote database table — tbl_cnt","text":"","code":"tbl_cnt(connector_object, name, ...)  # S3 method for class 'ConnectorDBI' tbl_cnt(connector_object, name, ...)  # S3 method for class 'ConnectorFS' tbl_cnt(connector_object, name, ...)  # S3 method for class 'ConnectorLogger' tbl_cnt(connector_object, name, ...)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/tbl_cnt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use dplyr verbs to interact with the remote database table — tbl_cnt","text":"connector_object Connector connector object use. name character Name content read, write, remove. Typically table name. ... Additional arguments passed method individual connector.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/tbl_cnt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use dplyr verbs to interact with the remote database table — tbl_cnt","text":"dplyr::tbl object.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/tbl_cnt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use dplyr verbs to interact with the remote database table — tbl_cnt","text":"","code":"# Use dplyr verbs on a table in a DBI database cnt <- connector_dbi(RSQLite::SQLite())  iris_cnt <- cnt |>   write_cnt(iris, \"iris\") |>   tbl_cnt(\"iris\")  iris_cnt #> # Source:   table<`iris`> [?? x 5] #> # Database: sqlite 3.50.3 [] #>    Sepal.Length Sepal.Width Petal.Length Petal.Width Species #>           <dbl>       <dbl>        <dbl>       <dbl> <chr>   #>  1          5.1         3.5          1.4         0.2 setosa  #>  2          4.9         3            1.4         0.2 setosa  #>  3          4.7         3.2          1.3         0.2 setosa  #>  4          4.6         3.1          1.5         0.2 setosa  #>  5          5           3.6          1.4         0.2 setosa  #>  6          5.4         3.9          1.7         0.4 setosa  #>  7          4.6         3.4          1.4         0.3 setosa  #>  8          5           3.4          1.5         0.2 setosa  #>  9          4.4         2.9          1.4         0.2 setosa  #> 10          4.9         3.1          1.5         0.1 setosa  #> # ℹ more rows  iris_cnt |>   dplyr::collect() #> # A tibble: 150 × 5 #>    Sepal.Length Sepal.Width Petal.Length Petal.Width Species #>           <dbl>       <dbl>        <dbl>       <dbl> <chr>   #>  1          5.1         3.5          1.4         0.2 setosa  #>  2          4.9         3            1.4         0.2 setosa  #>  3          4.7         3.2          1.3         0.2 setosa  #>  4          4.6         3.1          1.5         0.2 setosa  #>  5          5           3.6          1.4         0.2 setosa  #>  6          5.4         3.9          1.7         0.4 setosa  #>  7          4.6         3.4          1.4         0.3 setosa  #>  8          5           3.4          1.5         0.2 setosa  #>  9          4.4         2.9          1.4         0.2 setosa  #> 10          4.9         3.1          1.5         0.1 setosa  #> # ℹ 140 more rows  iris_cnt |>   dplyr::group_by(Species) |>   dplyr::summarise(     n = dplyr::n(),     mean.Sepal.Length = mean(Sepal.Length, na.rm = TRUE)   ) |>   dplyr::collect() #> # A tibble: 3 × 3 #>   Species        n mean.Sepal.Length #>   <chr>      <int>             <dbl> #> 1 setosa        50              5.01 #> 2 versicolor    50              5.94 #> 3 virginica     50              6.59  # Use dplyr verbs on a table  folder <- withr::local_tempdir() cnt <- connector_fs(folder) #> Error in validate_resource(self): Invalid file system connector: /tmp/RtmpL7fsh0/file1e964ab8e510 does not #> exist.  cnt |>   write_cnt(iris, \"iris.csv\")  iris_cnt <- cnt |>   tbl_cnt(\"iris.csv\")  iris_cnt #> # Source:   table<`iris.csv`> [?? x 5] #> # Database: sqlite 3.50.3 [] #>    Sepal.Length Sepal.Width Petal.Length Petal.Width Species #>           <dbl>       <dbl>        <dbl>       <dbl> <chr>   #>  1          5.1         3.5          1.4         0.2 setosa  #>  2          4.9         3            1.4         0.2 setosa  #>  3          4.7         3.2          1.3         0.2 setosa  #>  4          4.6         3.1          1.5         0.2 setosa  #>  5          5           3.6          1.4         0.2 setosa  #>  6          5.4         3.9          1.7         0.4 setosa  #>  7          4.6         3.4          1.4         0.3 setosa  #>  8          5           3.4          1.5         0.2 setosa  #>  9          4.4         2.9          1.4         0.2 setosa  #> 10          4.9         3.1          1.5         0.1 setosa  #> # ℹ more rows  iris_cnt |>   dplyr::group_by(Species) |>   dplyr::summarise(     n = dplyr::n(),     mean.Sepal.Length = mean(Sepal.Length, na.rm = TRUE)   ) #> # Source:   SQL [?? x 3] #> # Database: sqlite 3.50.3 [] #>   Species        n mean.Sepal.Length #>   <chr>      <int>             <dbl> #> 1 setosa        50              5.01 #> 2 versicolor    50              5.94 #> 3 virginica     50              6.59"},{"path":"https://novonordisk-opensource.github.io/connector/reference/upload_cnt.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload content to the connector — upload_cnt","title":"Upload content to the connector — upload_cnt","text":"Generic implementing upload files connector: ConnectorFS: Uses fs::file_copy() copy file file storage. ConnectorLogger: Logs upload operation calls underlying connector method.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/upload_cnt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload content to the connector — upload_cnt","text":"","code":"upload_cnt(   connector_object,   src,   dest = basename(src),   overwrite = zephyr::get_option(\"overwrite\", \"connector\"),   ... )  # S3 method for class 'ConnectorFS' upload_cnt(   connector_object,   src,   dest = basename(src),   overwrite = zephyr::get_option(\"overwrite\", \"connector\"),   ... )  # S3 method for class 'ConnectorLogger' upload_cnt(   connector_object,   src,   dest = basename(src),   overwrite = zephyr::get_option(\"overwrite\", \"connector\"),   ... )"},{"path":"https://novonordisk-opensource.github.io/connector/reference/upload_cnt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload content to the connector — upload_cnt","text":"connector_object Connector connector object use. src character Path file download upload dest character Name content read, write, remove. Typically table name. overwrite Overwrite existing content exists connector? See connector-options details. Default can set globally options(connector.overwrite = TRUE/FALSE) environment variable R_CONNECTOR_OVERWRITE.. Default: FALSE. ... Additional arguments passed method individual connector.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/upload_cnt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upload content to the connector — upload_cnt","text":"invisible connector_object.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/upload_cnt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upload content to the connector — upload_cnt","text":"","code":"# Upload file to a file storage  writeLines(\"this is an example\", \"example.txt\")  folder <- withr::local_tempdir() cnt <- connector_fs(folder) #> Error in validate_resource(self): Invalid file system connector: /tmp/RtmpL7fsh0/file1e963bf513f4 does not #> exist.  cnt |>   list_content_cnt(pattern = \"example.txt\") #> Error: object 'cnt' not found  cnt |>   upload_cnt(\"example.txt\") #> Error: object 'cnt' not found  cnt |>   list_content_cnt(pattern = \"example.txt\") #> Error: object 'cnt' not found  cnt |>   remove_cnt(\"example.txt\") #> Error: object 'cnt' not found  file.remove(\"example.txt\") #> [1] TRUE  # Add logging to a file system connector for uploads folder <- withr::local_tempdir() cnt <- connectors(data = connector_fs(folder)) |> add_logs() #> Error in validate_resource(self): Invalid file system connector: /tmp/RtmpL7fsh0/file1e964af8d609 does not #> exist.  # Create a temporary file temp_file <- tempfile(fileext = \".csv\") write.csv(iris, temp_file, row.names = FALSE)  cnt$data |>   upload_cnt(temp_file, \"uploaded_iris.csv\") #> Error: object 'cnt' not found"},{"path":"https://novonordisk-opensource.github.io/connector/reference/upload_directory_cnt.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload a directory — upload_directory_cnt","title":"Upload a directory — upload_directory_cnt","text":"Generic implementing upload directory connector. Mostly relevant file storage connectors. ConnectorFS: Uses fs::dir_copy().","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/upload_directory_cnt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload a directory — upload_directory_cnt","text":"","code":"upload_directory_cnt(   connector_object,   src,   dest,   overwrite = zephyr::get_option(\"overwrite\", \"connector\"),   open = FALSE,   ... )  # S3 method for class 'ConnectorFS' upload_directory_cnt(   connector_object,   src,   dest,   overwrite = zephyr::get_option(\"overwrite\", \"connector\"),   open = FALSE,   ... )"},{"path":"https://novonordisk-opensource.github.io/connector/reference/upload_directory_cnt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload a directory — upload_directory_cnt","text":"connector_object Connector connector object use. src character Path directory upload dest character name new directory place content overwrite Overwrite existing content exists connector? See connector-options details. Default can set globally options(connector.overwrite = TRUE/FALSE) environment variable R_CONNECTOR_OVERWRITE.. Default: FALSE. open logical Open directory new connector object. ... Additional arguments passed method individual connector.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/upload_directory_cnt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upload a directory — upload_directory_cnt","text":"invisible connector_object.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/use_connector.html","id":null,"dir":"Reference","previous_headings":"","what":"Use connector — use_connector","title":"Use connector — use_connector","text":"Utility function setup connections connector project: Creates configuration file (default _connector.yml) See vignette(\"connector\") configure file.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/use_connector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use connector — use_connector","text":"","code":"use_connector()"},{"path":"https://novonordisk-opensource.github.io/connector/reference/write_cnt.html","id":null,"dir":"Reference","previous_headings":"","what":"Write content to the connector — write_cnt","title":"Write content to the connector — write_cnt","text":"Generic implementing write content different connector objects: ConnectorDBI: Uses DBI::dbWriteTable() write table DBI connection. ConnectorFS: Uses write_file() Write file based file extension. underlying function used, thereby also arguments available ... depends file extension. ConnectorLogger: Logs write operation calls underlying connector method.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/write_cnt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write content to the connector — write_cnt","text":"","code":"write_cnt(   connector_object,   x,   name,   overwrite = zephyr::get_option(\"overwrite\", \"connector\"),   ... )  # S3 method for class 'ConnectorDBI' write_cnt(   connector_object,   x,   name,   overwrite = zephyr::get_option(\"overwrite\", \"connector\"),   ... )  # S3 method for class 'ConnectorFS' write_cnt(   connector_object,   x,   name,   overwrite = zephyr::get_option(\"overwrite\", \"connector\"),   ... )  # S3 method for class 'ConnectorLogger' write_cnt(connector_object, x, name, ...)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/write_cnt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write content to the connector — write_cnt","text":"connector_object Connector connector object use. x object write connection name character Name content read, write, remove. Typically table name. overwrite Overwrite existing content exists connector? See connector-options details. Default can set globally options(connector.overwrite = TRUE/FALSE) environment variable R_CONNECTOR_OVERWRITE.. Default: FALSE. ... Additional arguments passed method individual connector.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/write_cnt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write content to the connector — write_cnt","text":"invisible connector_object.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/write_cnt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write content to the connector — write_cnt","text":"","code":"# Write table to DBI database cnt <- connector_dbi(RSQLite::SQLite())  cnt |>   list_content_cnt() #> character(0)  cnt |>   write_cnt(iris, \"iris\")  cnt |>   list_content_cnt() #> [1] \"iris\"  # Write different file types to a file storage  folder <- withr::local_tempdir() cnt <- connector_fs(folder) #> Error in validate_resource(self): Invalid file system connector: /tmp/RtmpL7fsh0/file1e9662806de5 does not #> exist.  cnt |>   list_content_cnt(pattern = \"iris\") #> [1] \"iris\"  # rds file cnt |>   write_cnt(iris, \"iris.rds\")  # CSV file cnt |>   write_cnt(iris, \"iris.csv\")  cnt |>   list_content_cnt(pattern = \"iris\") #> [1] \"iris\"     \"iris.csv\" \"iris.rds\"  # Add logging to a database connector cnt <- connectors(data = connector_dbi(RSQLite::SQLite())) |> add_logs()  cnt$data |>   write_cnt(mtcars, \"cars\") #> {\"time\":\"2025-08-12 06:28:05\",\"type\":\"write\",\"file\":\"cars @ driver: SQLiteConnection, dbname: \"}"},{"path":"https://novonordisk-opensource.github.io/connector/reference/write_datasources.html","id":null,"dir":"Reference","previous_headings":"","what":"Write datasources attribute into a config file — write_datasources","title":"Write datasources attribute into a config file — write_datasources","text":"Reproduce workflow creating config file based connectors object associated datasource attributes.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/write_datasources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write datasources attribute into a config file — write_datasources","text":"","code":"write_datasources(connectors, file)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/write_datasources.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write datasources attribute into a config file — write_datasources","text":"connectors connectors object associated \"datasources\" attribute. file path config file","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/write_datasources.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write datasources attribute into a config file — write_datasources","text":"config file datasource attributes can reused connect function","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/write_datasources.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write datasources attribute into a config file — write_datasources","text":"","code":"withr::with_tempdir({ # Create dir for the example in tmpdir dir.create(\"example/demo_trial/adam\", recursive = TRUE)  # Connect to the datasources specified in it config <- system.file(\"config\", \"_connector.yml\", package = \"connector\") cnts <- connect(config)  # Extract the datasources to a config file yml_file <- tempfile(fileext = \".yml\") write_datasources(cnts, yml_file)  # Reconnect using the new config file re_connect <- connect(yml_file) re_connect }) #> ──────────────────────────────────────────────────────────────────────────────── #> Connection to: #> → adam #> • connector_fs #> • example/demo_trial/adam and test2 #> ──────────────────────────────────────────────────────────────────────────────── #> Connection to: #> → sdtm #> • connector_dbi #> • RSQLite::SQLite() and :memory: #> ──────────────────────────────────────────────────────────────────────────────── #> Connection to: #> → adam #> • connector_fs #> • example/demo_trial/adam and test2 #> ──────────────────────────────────────────────────────────────────────────────── #> Connection to: #> → sdtm #> • connector_dbi #> • RSQLite::SQLite() and :memory: #> <connectors> #>   $adam <test2> #>   $sdtm <ConnectorDBI>"},{"path":"https://novonordisk-opensource.github.io/connector/reference/write_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Write files based on the extension — write_file","title":"Write files based on the extension — write_file","text":"write_file() backbone write_cnt() methods, files written connector. function wrapper around write_ext() appropriate function write file chosen depending file extension. write_ext() methods defined following file extensions: txt: readr::write_lines() csv: readr::write_csv() parquet: arrow::write_parquet() rds: readr::write_rds() xpt: haven::write_xpt() yml/yaml: yaml::write_yaml() json: jsonlite::write_json() excel: writexl::write_xlsx()","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/write_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write files based on the extension — write_file","text":"","code":"write_file(x, file, overwrite = FALSE, ...)  write_ext(file, x, ...)  # S3 method for class 'txt' write_ext(file, x, ...)  # S3 method for class 'csv' write_ext(file, x, delim = \",\", ...)  # S3 method for class 'parquet' write_ext(file, x, ...)  # S3 method for class 'rds' write_ext(file, x, ...)  # S3 method for class 'xpt' write_ext(file, x, ...)  # S3 method for class 'yml' write_ext(file, x, ...)  # S3 method for class 'json' write_ext(file, x, ...)  # S3 method for class 'xlsx' write_ext(file, x, ...)"},{"path":"https://novonordisk-opensource.github.io/connector/reference/write_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write files based on the extension — write_file","text":"x Object write file character() Path write file. overwrite logical Overwrite existing content exists. ... parameters passed functions behind methods file extension. delim character() Delimiter use. Default \",\".","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/write_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write files based on the extension — write_file","text":"write_file(): invisible() file. write_ext(): return functions behind individual methods.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/write_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write files based on the extension — write_file","text":"Note write_file() overwrite existing files unless overwrite = TRUE, methods write_ext() overwrite existing files default.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/reference/write_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write files based on the extension — write_file","text":"","code":"# Write CSV file temp_csv <- tempfile(\"iris\", fileext = \".csv\") write_file(iris, temp_csv)"},{"path":[]},{"path":"https://novonordisk-opensource.github.io/connector/news/index.html","id":"breaking-changes-1-0-0","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"connector 1.0.0","text":"upload_cnt(file = \"path\", name = \"target\") → upload_cnt(src = \"path\", dest = \"target\") download_cnt(name = \"source\", file = \"path\") → download_cnt(src = \"source\", dest = \"path\") upload_directory_cnt(dir = \"path\", name = \"target\") → upload_directory_cnt(src = \"path\", dest = \"target\") download_directory_cnt(name = \"source\", dir = \"path\") → download_directory_cnt(src = \"source\", dest = \"path\")","code":""},{"path":"https://novonordisk-opensource.github.io/connector/news/index.html","id":"enhancements-1-0-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"connector 1.0.0","text":"Added upload_cnt download_cnt methods ConnectorLogger Added resource validation system validate_resource() function check_resource() S3 methods Added “metadata” attribute connectors object extract_metadata() extract metadata connectors Added default_ext option set default extension use reading writing files Added use_connector() function create template connector configuration files","code":""},{"path":"https://novonordisk-opensource.github.io/connector/news/index.html","id":"bugs-1-0-0","dir":"Changelog","previous_headings":"","what":"Bugs","title":"connector 1.0.0","text":"Fixed bug connectors function. can now pass R Object.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/news/index.html","id":"other-1-0-0","dir":"Changelog","previous_headings":"","what":"Other","title":"connector 1.0.0","text":"Reformat code air Update unit tests Rearrange documentation Added unit tests resource validation","code":""},{"path":"https://novonordisk-opensource.github.io/connector/news/index.html","id":"connector-011","dir":"Changelog","previous_headings":"","what":"connector 0.1.1","title":"connector 0.1.1","text":"CRAN release: 2025-05-09","code":""},{"path":"https://novonordisk-opensource.github.io/connector/news/index.html","id":"enhancements-0-1-1","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"connector 0.1.1","text":"Added pkgdown url Description Added codecov workflow badge Used invisible return path yaml manipulation functions","code":""},{"path":"https://novonordisk-opensource.github.io/connector/news/index.html","id":"other-0-1-1","dir":"Changelog","previous_headings":"","what":"Other","title":"connector 0.1.1","text":"Always using tempdir() examples tests Never write user library Remove examples using system.file() non exported functions (save time rewriting ) Silenced messages tests easier overview","code":""},{"path":"https://novonordisk-opensource.github.io/connector/news/index.html","id":"bugs-0-1-1","dir":"Changelog","previous_headings":"","what":"Bugs","title":"connector 0.1.1","text":"Fixed url GitHub Actions badge","code":""},{"path":"https://novonordisk-opensource.github.io/connector/news/index.html","id":"connector-010","dir":"Changelog","previous_headings":"","what":"connector 0.1.0","title":"connector 0.1.0","text":"CRAN release: 2025-04-25","code":""},{"path":"https://novonordisk-opensource.github.io/connector/news/index.html","id":"enhancements-0-1-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"connector 0.1.0","text":"Prepare Cran release Use option logging param Adapt UT whirl 0.2.0","code":""},{"path":"https://novonordisk-opensource.github.io/connector/news/index.html","id":"bugs-0-1-0","dir":"Changelog","previous_headings":"","what":"Bugs","title":"connector 0.1.0","text":"Fix overwrite issue writing files","code":""},{"path":"https://novonordisk-opensource.github.io/connector/news/index.html","id":"connector-009","dir":"Changelog","previous_headings":"","what":"connector 0.0.9","title":"connector 0.0.9","text":"Enhancements * Fix yaml dependency xlsm extension * Add zephyr remove options package. * Fix pkgdown problems Connector class. * Added upload_directory_cnt() download_directory_cnt() generics relevant ConnectorFS. * Remove overwrite option Connector write_cnt() class method.","code":""},{"path":[]},{"path":"https://novonordisk-opensource.github.io/connector/news/index.html","id":"breaking-changes-0-0-8","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"connector 0.0.8","text":"Changed connector class names connector Connector, connector_fs ConnectorFS, etc, Added wrapper functions new class names. Fixed documentation new class names.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/news/index.html","id":"enhancements-0-0-8","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"connector 0.0.8","text":"Removed test dependency package {mockery} deprecated. Using recommended testthat::local_mocked_bindings() instead. Add precommit repo change code according errors. Add github templates easier development issue handling.","code":""},{"path":[]},{"path":"https://novonordisk-opensource.github.io/connector/news/index.html","id":"features-0-0-7","dir":"Changelog","previous_headings":"","what":"Features","title":"connector 0.0.7","text":"Modified vignettes/customize.Rmd ensure internal pipeline run successfully.","code":""},{"path":[]},{"path":"https://novonordisk-opensource.github.io/connector/news/index.html","id":"breaking-changes-0-0-6","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"connector 0.0.6","text":"Removed dependency {connector.logger} package. Logging functionality now integrated directly {connector} using {whirl}.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/news/index.html","id":"features-0-0-6","dir":"Changelog","previous_headings":"","what":"Features","title":"connector 0.0.6","text":"Added integrated logging functionality using {whirl}. Implemented log_read_connector(), log_write_connector(), log_remove_connector() generics methods different connector types. Connectors constructor now builds datasources attribute. Added ability write datasources attribute configuration file. Created new class nested connectors objects, “nested_connectors”. Added tbl_cnt ConnectorFS redundancy fs dbi types connectors.","code":""},{"path":"https://novonordisk-opensource.github.io/connector/news/index.html","id":"enhancements-0-0-6","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"connector 0.0.6","text":"Fixed add_logs() function add logging capability connections. Enhanced CI compatibility vignettes adding condition set working directory running CI environment. Expanded test coverage include new logging functionality.","code":""},{"path":[]},{"path":"https://novonordisk-opensource.github.io/connector/news/index.html","id":"features-0-0-5","dir":"Changelog","previous_headings":"","what":"Features:","title":"connector 0.0.5 (2025-01-15)","text":"Add configuration manipulation functions adding/removing metadata datasources ConnectorDBI now overwrites tables default, mirror behaviour fs dbi connectors.","code":""},{"path":[]},{"path":"https://novonordisk-opensource.github.io/connector/news/index.html","id":"migration-0-0-4","dir":"Changelog","previous_headings":"","what":"Migration:","title":"connector 0.0.4 (2024-12-03)","text":"Migration public github","code":""},{"path":"https://novonordisk-opensource.github.io/connector/news/index.html","id":"features-0-0-4","dir":"Changelog","previous_headings":"","what":"Features:","title":"connector 0.0.4 (2024-12-03)","text":"Update create_directory_cnt() Added metadata parameter connect() comprehensive testing Better integration whirl connector.logger","code":""},{"path":"https://novonordisk-opensource.github.io/connector/news/index.html","id":"other-0-0-4","dir":"Changelog","previous_headings":"","what":"Other:","title":"connector 0.0.4 (2024-12-03)","text":"Reducing number dependencies. Better messages","code":""},{"path":[]},{"path":"https://novonordisk-opensource.github.io/connector/news/index.html","id":"breaking-changes-0-0-3","dir":"Changelog","previous_headings":"","what":"Breaking Changes:","title":"connector 0.0.3 (2024-09-25)","text":"rename function *_cnt cnt_","code":""},{"path":"https://novonordisk-opensource.github.io/connector/news/index.html","id":"features-0-0-3","dir":"Changelog","previous_headings":"","what":"Features:","title":"connector 0.0.3 (2024-09-25)","text":"Nested connectors objects Use active bindings User guide added","code":""},{"path":"https://novonordisk-opensource.github.io/connector/news/index.html","id":"connector-002","dir":"Changelog","previous_headings":"","what":"connector 0.0.2","title":"connector 0.0.2","text":"Added connectors super class","code":""},{"path":"https://novonordisk-opensource.github.io/connector/news/index.html","id":"connector-001","dir":"Changelog","previous_headings":"","what":"connector 0.0.1","title":"connector 0.0.1","text":"Initial version","code":""}]
